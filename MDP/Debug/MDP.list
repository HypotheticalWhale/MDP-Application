
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006968  08006968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a24  08006a24  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006a24  08006a24  00016a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a2c  08006a2c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a30  08006a30  00016a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004ae0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004af0  20004af0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a230  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030d4  00000000  00000000  0003a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  0003d348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001330  00000000  00000000  0003e780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002e11  00000000  00000000  0003fab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000159a0  00000000  00000000  000428c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4a5b  00000000  00000000  00058261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012ccbc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055e0  00000000  00000000  0012cd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006950 	.word	0x08006950

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006950 	.word	0x08006950

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fdf6 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f83c 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fab2 	bl	8000a3c <MX_GPIO_Init>
  MX_TIM8_Init();
 80004d8:	f000 f9dc 	bl	8000894 <MX_TIM8_Init>
  MX_TIM2_Init();
 80004dc:	f000 f932 	bl	8000744 <MX_TIM2_Init>
  MX_TIM1_Init();
 80004e0:	f000 f892 	bl	8000608 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80004e4:	f000 fa80 	bl	80009e8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80004e8:	f000 f980 	bl	80007ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ec:	f003 fca2 	bl	8003e34 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <main+0x60>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <main+0x64>)
 80004f6:	f003 fce7 	bl	8003ec8 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a0c      	ldr	r2, [pc, #48]	; (8000530 <main+0x68>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motors, NULL, &MotorTask_attributes);
 8000500:	4a0c      	ldr	r2, [pc, #48]	; (8000534 <main+0x6c>)
 8000502:	2100      	movs	r1, #0
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <main+0x70>)
 8000506:	f003 fcdf 	bl	8003ec8 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <main+0x74>)
 800050e:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(encoder, NULL, &Encoder_attributes);
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <main+0x78>)
 8000512:	2100      	movs	r1, #0
 8000514:	480b      	ldr	r0, [pc, #44]	; (8000544 <main+0x7c>)
 8000516:	f003 fcd7 	bl	8003ec8 <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <main+0x80>)
 800051e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000520:	f003 fcac 	bl	8003e7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x5c>
 8000526:	bf00      	nop
 8000528:	080069a0 	.word	0x080069a0
 800052c:	08000b9d 	.word	0x08000b9d
 8000530:	2000493c 	.word	0x2000493c
 8000534:	080069c4 	.word	0x080069c4
 8000538:	08000bad 	.word	0x08000bad
 800053c:	200049cc 	.word	0x200049cc
 8000540:	080069e8 	.word	0x080069e8
 8000544:	08000be9 	.word	0x08000be9
 8000548:	20004aa8 	.word	0x20004aa8

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	; 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2230      	movs	r2, #48	; 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f006 f9f0 	bl	8006940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <SystemClock_Config+0xb4>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <SystemClock_Config+0xb4>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <SystemClock_Config+0xb4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <SystemClock_Config+0xb8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <SystemClock_Config+0xb8>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <SystemClock_Config+0xb8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 f949 	bl	8001854 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005c8:	f000 fb5a 	bl	8000c80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fbac 	bl	8001d44 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005f2:	f000 fb45 	bl	8000c80 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b096      	sub	sp, #88	; 0x58
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]
 8000636:	615a      	str	r2, [r3, #20]
 8000638:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2220      	movs	r2, #32
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f006 f97d 	bl	8006940 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000646:	4b3d      	ldr	r3, [pc, #244]	; (800073c <MX_TIM1_Init+0x134>)
 8000648:	4a3d      	ldr	r2, [pc, #244]	; (8000740 <MX_TIM1_Init+0x138>)
 800064a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 800064c:	4b3b      	ldr	r3, [pc, #236]	; (800073c <MX_TIM1_Init+0x134>)
 800064e:	22a0      	movs	r2, #160	; 0xa0
 8000650:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	4b3a      	ldr	r3, [pc, #232]	; (800073c <MX_TIM1_Init+0x134>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000658:	4b38      	ldr	r3, [pc, #224]	; (800073c <MX_TIM1_Init+0x134>)
 800065a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800065e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000660:	4b36      	ldr	r3, [pc, #216]	; (800073c <MX_TIM1_Init+0x134>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000666:	4b35      	ldr	r3, [pc, #212]	; (800073c <MX_TIM1_Init+0x134>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066c:	4b33      	ldr	r3, [pc, #204]	; (800073c <MX_TIM1_Init+0x134>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000672:	4832      	ldr	r0, [pc, #200]	; (800073c <MX_TIM1_Init+0x134>)
 8000674:	f001 fd36 	bl	80020e4 <HAL_TIM_Base_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800067e:	f000 faff 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000688:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800068c:	4619      	mov	r1, r3
 800068e:	482b      	ldr	r0, [pc, #172]	; (800073c <MX_TIM1_Init+0x134>)
 8000690:	f002 f88e 	bl	80027b0 <HAL_TIM_ConfigClockSource>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800069a:	f000 faf1 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800069e:	4827      	ldr	r0, [pc, #156]	; (800073c <MX_TIM1_Init+0x134>)
 80006a0:	f001 fd6f 	bl	8002182 <HAL_TIM_PWM_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80006aa:	f000 fae9 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ae:	2300      	movs	r3, #0
 80006b0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006ba:	4619      	mov	r1, r3
 80006bc:	481f      	ldr	r0, [pc, #124]	; (800073c <MX_TIM1_Init+0x134>)
 80006be:	f002 fc4f 	bl	8002f60 <HAL_TIMEx_MasterConfigSynchronization>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006c8:	f000 fada 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006cc:	2360      	movs	r3, #96	; 0x60
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e8:	220c      	movs	r2, #12
 80006ea:	4619      	mov	r1, r3
 80006ec:	4813      	ldr	r0, [pc, #76]	; (800073c <MX_TIM1_Init+0x134>)
 80006ee:	f001 ff9d 	bl	800262c <HAL_TIM_PWM_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80006f8:	f000 fac2 	bl	8000c80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000714:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	4807      	ldr	r0, [pc, #28]	; (800073c <MX_TIM1_Init+0x134>)
 8000720:	f002 fc9a 	bl	8003058 <HAL_TIMEx_ConfigBreakDeadTime>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800072a:	f000 faa9 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800072e:	4803      	ldr	r0, [pc, #12]	; (800073c <MX_TIM1_Init+0x134>)
 8000730:	f000 fbd0 	bl	8000ed4 <HAL_TIM_MspPostInit>

}
 8000734:	bf00      	nop
 8000736:	3758      	adds	r7, #88	; 0x58
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20004a18 	.word	0x20004a18
 8000740:	40010000 	.word	0x40010000

08000744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2224      	movs	r2, #36	; 0x24
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f006 f8f4 	bl	8006940 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000760:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_TIM2_Init+0xa4>)
 8000762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_TIM2_Init+0xa4>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_TIM2_Init+0xa4>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_TIM2_Init+0xa4>)
 8000776:	f04f 32ff 	mov.w	r2, #4294967295
 800077a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_TIM2_Init+0xa4>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_TIM2_Init+0xa4>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000788:	2303      	movs	r3, #3
 800078a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000790:	2301      	movs	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000798:	230a      	movs	r3, #10
 800079a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007a0:	2301      	movs	r3, #1
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80007a8:	230a      	movs	r3, #10
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_TIM2_Init+0xa4>)
 80007b4:	f001 fe06 	bl	80023c4 <HAL_TIM_Encoder_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007be:	f000 fa5f 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_TIM2_Init+0xa4>)
 80007d0:	f002 fbc6 	bl	8002f60 <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80007da:	f000 fa51 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3730      	adds	r7, #48	; 0x30
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20004a60 	.word	0x20004a60

080007ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2224      	movs	r2, #36	; 0x24
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f006 f8a0 	bl	8006940 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_TIM3_Init+0xa0>)
 800080a:	4a21      	ldr	r2, [pc, #132]	; (8000890 <MX_TIM3_Init+0xa4>)
 800080c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_TIM3_Init+0xa0>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_TIM3_Init+0xa0>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_TIM3_Init+0xa0>)
 800081c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000820:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_TIM3_Init+0xa0>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_TIM3_Init+0xa0>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800082e:	2303      	movs	r3, #3
 8000830:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000836:	2301      	movs	r3, #1
 8000838:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800083e:	230a      	movs	r3, #10
 8000840:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000846:	2301      	movs	r3, #1
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800084e:	230a      	movs	r3, #10
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4619      	mov	r1, r3
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_TIM3_Init+0xa0>)
 800085a:	f001 fdb3 	bl	80023c4 <HAL_TIM_Encoder_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000864:	f000 fa0c 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_TIM3_Init+0xa0>)
 8000876:	f002 fb73 	bl	8002f60 <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000880:	f000 f9fe 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	3730      	adds	r7, #48	; 0x30
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200049d0 	.word	0x200049d0
 8000890:	40000400 	.word	0x40000400

08000894 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b096      	sub	sp, #88	; 0x58
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
 80008c2:	615a      	str	r2, [r3, #20]
 80008c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2220      	movs	r2, #32
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f006 f837 	bl	8006940 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80008d2:	4b43      	ldr	r3, [pc, #268]	; (80009e0 <MX_TIM8_Init+0x14c>)
 80008d4:	4a43      	ldr	r2, [pc, #268]	; (80009e4 <MX_TIM8_Init+0x150>)
 80008d6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80008d8:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <MX_TIM8_Init+0x14c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <MX_TIM8_Init+0x14c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80008e4:	4b3e      	ldr	r3, [pc, #248]	; (80009e0 <MX_TIM8_Init+0x14c>)
 80008e6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80008ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b3c      	ldr	r3, [pc, #240]	; (80009e0 <MX_TIM8_Init+0x14c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80008f2:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <MX_TIM8_Init+0x14c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f8:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <MX_TIM8_Init+0x14c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80008fe:	4838      	ldr	r0, [pc, #224]	; (80009e0 <MX_TIM8_Init+0x14c>)
 8000900:	f001 fbf0 	bl	80020e4 <HAL_TIM_Base_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800090a:	f000 f9b9 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000914:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000918:	4619      	mov	r1, r3
 800091a:	4831      	ldr	r0, [pc, #196]	; (80009e0 <MX_TIM8_Init+0x14c>)
 800091c:	f001 ff48 	bl	80027b0 <HAL_TIM_ConfigClockSource>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000926:	f000 f9ab 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800092a:	482d      	ldr	r0, [pc, #180]	; (80009e0 <MX_TIM8_Init+0x14c>)
 800092c:	f001 fc29 	bl	8002182 <HAL_TIM_PWM_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000936:	f000 f9a3 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000942:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000946:	4619      	mov	r1, r3
 8000948:	4825      	ldr	r0, [pc, #148]	; (80009e0 <MX_TIM8_Init+0x14c>)
 800094a:	f002 fb09 	bl	8002f60 <HAL_TIMEx_MasterConfigSynchronization>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000954:	f000 f994 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000958:	2360      	movs	r3, #96	; 0x60
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000964:	2300      	movs	r3, #0
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	2200      	movs	r2, #0
 800097a:	4619      	mov	r1, r3
 800097c:	4818      	ldr	r0, [pc, #96]	; (80009e0 <MX_TIM8_Init+0x14c>)
 800097e:	f001 fe55 	bl	800262c <HAL_TIM_PWM_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000988:	f000 f97a 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	2204      	movs	r2, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4812      	ldr	r0, [pc, #72]	; (80009e0 <MX_TIM8_Init+0x14c>)
 8000996:	f001 fe49 	bl	800262c <HAL_TIM_PWM_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80009a0:	f000 f96e 	bl	8000c80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_TIM8_Init+0x14c>)
 80009c8:	f002 fb46 	bl	8003058 <HAL_TIMEx_ConfigBreakDeadTime>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80009d2:	f000 f955 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3758      	adds	r7, #88	; 0x58
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20004940 	.word	0x20004940
 80009e4:	40010400 	.word	0x40010400

080009e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <MX_USART3_UART_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a20:	f002 fb6c 	bl	80030fc <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f000 f929 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20004988 	.word	0x20004988
 8000a38:	40004800 	.word	0x40004800

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b4d      	ldr	r3, [pc, #308]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a4c      	ldr	r2, [pc, #304]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000a5c:	f043 0310 	orr.w	r3, r3, #16
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b4a      	ldr	r3, [pc, #296]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0310 	and.w	r3, r3, #16
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b46      	ldr	r3, [pc, #280]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a45      	ldr	r2, [pc, #276]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b43      	ldr	r3, [pc, #268]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	4b3f      	ldr	r3, [pc, #252]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a3e      	ldr	r2, [pc, #248]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b3c      	ldr	r3, [pc, #240]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a37      	ldr	r2, [pc, #220]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a30      	ldr	r2, [pc, #192]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8000ae4:	482a      	ldr	r0, [pc, #168]	; (8000b90 <MX_GPIO_Init+0x154>)
 8000ae6:	f000 fe9b 	bl	8001820 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	210c      	movs	r1, #12
 8000aee:	4829      	ldr	r0, [pc, #164]	; (8000b94 <MX_GPIO_Init+0x158>)
 8000af0:	f000 fe96 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Bluetooth_TX_GPIO_Port, Bluetooth_TX_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2140      	movs	r1, #64	; 0x40
 8000af8:	4827      	ldr	r0, [pc, #156]	; (8000b98 <MX_GPIO_Init+0x15c>)
 8000afa:	f000 fe91 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000afe:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8000b02:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	481e      	ldr	r0, [pc, #120]	; (8000b90 <MX_GPIO_Init+0x154>)
 8000b18:	f000 fce6 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	4818      	ldr	r0, [pc, #96]	; (8000b94 <MX_GPIO_Init+0x158>)
 8000b34:	f000 fcd8 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 8000b38:	2330      	movs	r3, #48	; 0x30
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4812      	ldr	r0, [pc, #72]	; (8000b94 <MX_GPIO_Init+0x158>)
 8000b4c:	f000 fccc 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Bluetooth_RX_Pin */
  GPIO_InitStruct.Pin = Bluetooth_RX_Pin;
 8000b50:	2320      	movs	r3, #32
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Bluetooth_RX_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_GPIO_Init+0x15c>)
 8000b64:	f000 fcc0 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Bluetooth_TX_Pin */
  GPIO_InitStruct.Pin = Bluetooth_TX_Pin;
 8000b68:	2340      	movs	r3, #64	; 0x40
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Bluetooth_TX_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <MX_GPIO_Init+0x15c>)
 8000b80:	f000 fcb2 	bl	80014e8 <HAL_GPIO_Init>

}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020c00 	.word	0x40020c00

08000b9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f003 fa21 	bl	8003fec <osDelay>
 8000baa:	e7fb      	b.n	8000ba4 <StartDefaultTask+0x8>

08000bac <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void *argument)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	//servo motor
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
	//htmi1.Instance->CCR4 = 85; extreme right
	//htmi1.Instance->CCR4 = 72; center
	//htmi1.Instance->CCr4 = 60 ; extreme left
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	480a      	ldr	r0, [pc, #40]	; (8000be0 <motors+0x34>)
 8000bb8:	f001 fb3c 	bl	8002234 <HAL_TIM_PWM_Start>
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	4808      	ldr	r0, [pc, #32]	; (8000be4 <motors+0x38>)
 8000bc2:	f000 fe2d 	bl	8001820 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2108      	movs	r1, #8
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <motors+0x38>)
 8000bcc:	f000 fe28 	bl	8001820 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,25);
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <motors+0x34>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2219      	movs	r2, #25
 8000bd6:	635a      	str	r2, [r3, #52]	; 0x34
    osDelay(1);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f003 fa07 	bl	8003fec <osDelay>
	  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 8000bde:	e7ed      	b.n	8000bbc <motors+0x10>
 8000be0:	20004940 	.word	0x20004940
 8000be4:	40020000 	.word	0x40020000

08000be8 <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8000bf0:	213c      	movs	r1, #60	; 0x3c
 8000bf2:	4820      	ldr	r0, [pc, #128]	; (8000c74 <encoder+0x8c>)
 8000bf4:	f001 fc8c 	bl	8002510 <HAL_TIM_Encoder_Start>
	int a,b,c;
	uint32_t tick;
	a = __HAL_TIM_GET_COUNTER(&htim2);
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <encoder+0x90>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfe:	617b      	str	r3, [r7, #20]
	tick=HAL_GetTick;
 8000c00:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <encoder+0x94>)
 8000c02:	613b      	str	r3, [r7, #16]
  for(;;)
  {
	  if(HAL_GetTick()-tick >1000L){
 8000c04:	f000 fac0 	bl	8001188 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c12:	d92b      	bls.n	8000c6c <encoder+0x84>
		  b=__HAL_TIM_GET_COUNTER(&htim2);
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <encoder+0x90>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	60fb      	str	r3, [r7, #12]
		  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <encoder+0x90>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	2b10      	cmp	r3, #16
 8000c28:	d110      	bne.n	8000c4c <encoder+0x64>
		  if(b<a){
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	da04      	bge.n	8000c3c <encoder+0x54>
			  c=a-b;
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	e017      	b.n	8000c6c <encoder+0x84>
		  }
		  else{
			  c= (65535 - b)+a;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000c42:	33ff      	adds	r3, #255	; 0xff
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	4413      	add	r3, r2
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	e00f      	b.n	8000c6c <encoder+0x84>
		  }
	  }
	  else{
		  if(b>a){
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	dd04      	ble.n	8000c5e <encoder+0x76>
			  c=b-a;
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	e006      	b.n	8000c6c <encoder+0x84>
		  }
		  else{
			  c= (65535-a)+b;
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000c64:	33ff      	adds	r3, #255	; 0xff
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	4413      	add	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
		  }
	  }

	  }
    osDelay(1);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f003 f9bd 	bl	8003fec <osDelay>
	  if(HAL_GetTick()-tick >1000L){
 8000c72:	e7c7      	b.n	8000c04 <encoder+0x1c>
 8000c74:	20004940 	.word	0x20004940
 8000c78:	20004a60 	.word	0x20004a60
 8000c7c:	08001189 	.word	0x08001189

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_MspInit+0x54>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a11      	ldr	r2, [pc, #68]	; (8000ce0 <HAL_MspInit+0x54>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x54>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_MspInit+0x54>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_MspInit+0x54>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_MspInit+0x54>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	210f      	movs	r1, #15
 8000cce:	f06f 0001 	mvn.w	r0, #1
 8000cd2:	f000 fb40 	bl	8001356 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a23      	ldr	r2, [pc, #140]	; (8000d90 <HAL_TIM_Base_MspInit+0xac>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d10e      	bne.n	8000d24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <HAL_TIM_Base_MspInit+0xb0>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <HAL_TIM_Base_MspInit+0xb0>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6453      	str	r3, [r2, #68]	; 0x44
 8000d16:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <HAL_TIM_Base_MspInit+0xb0>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000d22:	e030      	b.n	8000d86 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <HAL_TIM_Base_MspInit+0xb4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d12b      	bne.n	8000d86 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_TIM_Base_MspInit+0xb0>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a17      	ldr	r2, [pc, #92]	; (8000d94 <HAL_TIM_Base_MspInit+0xb0>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <HAL_TIM_Base_MspInit+0xb0>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_TIM_Base_MspInit+0xb0>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <HAL_TIM_Base_MspInit+0xb0>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_TIM_Base_MspInit+0xb0>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8000d66:	23c0      	movs	r3, #192	; 0xc0
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000d76:	2303      	movs	r3, #3
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4806      	ldr	r0, [pc, #24]	; (8000d9c <HAL_TIM_Base_MspInit+0xb8>)
 8000d82:	f000 fbb1 	bl	80014e8 <HAL_GPIO_Init>
}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40010000 	.word	0x40010000
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40010400 	.word	0x40010400
 8000d9c:	40020800 	.word	0x40020800

08000da0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc0:	d14b      	bne.n	8000e5a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
 8000dc6:	4b3f      	ldr	r3, [pc, #252]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a3e      	ldr	r2, [pc, #248]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b3c      	ldr	r3, [pc, #240]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a37      	ldr	r2, [pc, #220]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b35      	ldr	r3, [pc, #212]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a30      	ldr	r2, [pc, #192]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e24:	2302      	movs	r3, #2
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4825      	ldr	r0, [pc, #148]	; (8000ec8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000e34:	f000 fb58 	bl	80014e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e38:	2308      	movs	r3, #8
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e44:	2302      	movs	r3, #2
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	481e      	ldr	r0, [pc, #120]	; (8000ecc <HAL_TIM_Encoder_MspInit+0x12c>)
 8000e54:	f000 fb48 	bl	80014e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e58:	e030      	b.n	8000ebc <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ed0 <HAL_TIM_Encoder_MspInit+0x130>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d12b      	bne.n	8000ebc <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	6413      	str	r3, [r2, #64]	; 0x40
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e9c:	23c0      	movs	r3, #192	; 0xc0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eac:	2302      	movs	r3, #2
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000eb8:	f000 fb16 	bl	80014e8 <HAL_GPIO_Init>
}
 8000ebc:	bf00      	nop
 8000ebe:	3730      	adds	r7, #48	; 0x30
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40000400 	.word	0x40000400

08000ed4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <HAL_TIM_MspPostInit+0x68>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d11e      	bne.n	8000f34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_TIM_MspPostInit+0x6c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <HAL_TIM_MspPostInit+0x6c>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_TIM_MspPostInit+0x6c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <HAL_TIM_MspPostInit+0x70>)
 8000f30:	f000 fada 	bl	80014e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f34:	bf00      	nop
 8000f36:	3720      	adds	r7, #32
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40010000 	.word	0x40010000
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40021000 	.word	0x40021000

08000f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <HAL_UART_MspInit+0x94>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d134      	bne.n	8000fd4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fa2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <HAL_UART_MspInit+0x9c>)
 8000fc0:	f000 fa92 	bl	80014e8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2105      	movs	r1, #5
 8000fc8:	2027      	movs	r0, #39	; 0x27
 8000fca:	f000 f9c4 	bl	8001356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fce:	2027      	movs	r0, #39	; 0x27
 8000fd0:	f000 f9dd 	bl	800138e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3728      	adds	r7, #40	; 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40004800 	.word	0x40004800
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020800 	.word	0x40020800

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <NMI_Handler+0x4>

08000fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <UsageFault_Handler+0x4>

08001006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001018:	f000 f8a2 	bl	8001160 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800101c:	f004 fbf4 	bl	8005808 <xTaskGetSchedulerState>
 8001020:	4603      	mov	r3, r0
 8001022:	2b01      	cmp	r3, #1
 8001024:	d001      	beq.n	800102a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001026:	f005 f9df 	bl	80063e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <USART3_IRQHandler+0x10>)
 8001036:	f002 f8af 	bl	8003198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20004988 	.word	0x20004988

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800106e:	490e      	ldr	r1, [pc, #56]	; (80010a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001084:	4c0b      	ldr	r4, [pc, #44]	; (80010b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001092:	f7ff ffd7 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f005 fc21 	bl	80068dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fa15 	bl	80004c8 <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010ac:	08006a34 	.word	0x08006a34
  ldr r2, =_sbss
 80010b0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010b4:	20004af0 	.word	0x20004af0

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_Init+0x40>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_Init+0x40>)
 80010d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_Init+0x40>)
 80010de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f92b 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	200f      	movs	r0, #15
 80010ec:	f000 f808 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff fdcc 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023c00 	.word	0x40023c00

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x54>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x58>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f943 	bl	80013aa <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f000 f90b 	bl	8001356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_InitTick+0x5c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000000 	.word	0x20000000
 8001158:	20000008 	.word	0x20000008
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008
 8001184:	20004aac 	.word	0x20004aac

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20004aac 	.word	0x20004aac

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4907      	ldr	r1, [pc, #28]	; (800123c <__NVIC_EnableIRQ+0x38>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	; (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	; (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	; 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f7ff ff8e 	bl	8001240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff29 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff3e 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff8e 	bl	8001294 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5d 	bl	8001240 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff31 	bl	8001204 <__NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffa2 	bl	80012fc <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff feda 	bl	8001188 <HAL_GetTick>
 80013d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d008      	beq.n	80013f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e052      	b.n	800149a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0216 	bic.w	r2, r2, #22
 8001402:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001412:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	2b00      	cmp	r3, #0
 800141a:	d103      	bne.n	8001424 <HAL_DMA_Abort+0x62>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001420:	2b00      	cmp	r3, #0
 8001422:	d007      	beq.n	8001434 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0208 	bic.w	r2, r2, #8
 8001432:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001444:	e013      	b.n	800146e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001446:	f7ff fe9f 	bl	8001188 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b05      	cmp	r3, #5
 8001452:	d90c      	bls.n	800146e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2220      	movs	r2, #32
 8001458:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2203      	movs	r2, #3
 800145e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e015      	b.n	800149a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1e4      	bne.n	8001446 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001480:	223f      	movs	r2, #63	; 0x3f
 8001482:	409a      	lsls	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d004      	beq.n	80014c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e00c      	b.n	80014da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2205      	movs	r2, #5
 80014c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	e16b      	b.n	80017dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001504:	2201      	movs	r2, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	429a      	cmp	r2, r3
 800151e:	f040 815a 	bne.w	80017d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b01      	cmp	r3, #1
 800152c:	d005      	beq.n	800153a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001536:	2b02      	cmp	r3, #2
 8001538:	d130      	bne.n	800159c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	2203      	movs	r2, #3
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001570:	2201      	movs	r2, #1
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	f003 0201 	and.w	r2, r3, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d017      	beq.n	80015d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d123      	bne.n	800162c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	08da      	lsrs	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3208      	adds	r2, #8
 80015ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3208      	adds	r2, #8
 8001626:	69b9      	ldr	r1, [r7, #24]
 8001628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0203 	and.w	r2, r3, #3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80b4 	beq.w	80017d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b60      	ldr	r3, [pc, #384]	; (80017f4 <HAL_GPIO_Init+0x30c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a5f      	ldr	r2, [pc, #380]	; (80017f4 <HAL_GPIO_Init+0x30c>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b5d      	ldr	r3, [pc, #372]	; (80017f4 <HAL_GPIO_Init+0x30c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800168a:	4a5b      	ldr	r2, [pc, #364]	; (80017f8 <HAL_GPIO_Init+0x310>)
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	220f      	movs	r2, #15
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a52      	ldr	r2, [pc, #328]	; (80017fc <HAL_GPIO_Init+0x314>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d02b      	beq.n	800170e <HAL_GPIO_Init+0x226>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a51      	ldr	r2, [pc, #324]	; (8001800 <HAL_GPIO_Init+0x318>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d025      	beq.n	800170a <HAL_GPIO_Init+0x222>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a50      	ldr	r2, [pc, #320]	; (8001804 <HAL_GPIO_Init+0x31c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d01f      	beq.n	8001706 <HAL_GPIO_Init+0x21e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4f      	ldr	r2, [pc, #316]	; (8001808 <HAL_GPIO_Init+0x320>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d019      	beq.n	8001702 <HAL_GPIO_Init+0x21a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4e      	ldr	r2, [pc, #312]	; (800180c <HAL_GPIO_Init+0x324>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_GPIO_Init+0x216>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4d      	ldr	r2, [pc, #308]	; (8001810 <HAL_GPIO_Init+0x328>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00d      	beq.n	80016fa <HAL_GPIO_Init+0x212>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4c      	ldr	r2, [pc, #304]	; (8001814 <HAL_GPIO_Init+0x32c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d007      	beq.n	80016f6 <HAL_GPIO_Init+0x20e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4b      	ldr	r2, [pc, #300]	; (8001818 <HAL_GPIO_Init+0x330>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_GPIO_Init+0x20a>
 80016ee:	2307      	movs	r3, #7
 80016f0:	e00e      	b.n	8001710 <HAL_GPIO_Init+0x228>
 80016f2:	2308      	movs	r3, #8
 80016f4:	e00c      	b.n	8001710 <HAL_GPIO_Init+0x228>
 80016f6:	2306      	movs	r3, #6
 80016f8:	e00a      	b.n	8001710 <HAL_GPIO_Init+0x228>
 80016fa:	2305      	movs	r3, #5
 80016fc:	e008      	b.n	8001710 <HAL_GPIO_Init+0x228>
 80016fe:	2304      	movs	r3, #4
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x228>
 8001702:	2303      	movs	r3, #3
 8001704:	e004      	b.n	8001710 <HAL_GPIO_Init+0x228>
 8001706:	2302      	movs	r3, #2
 8001708:	e002      	b.n	8001710 <HAL_GPIO_Init+0x228>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_GPIO_Init+0x228>
 800170e:	2300      	movs	r3, #0
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	f002 0203 	and.w	r2, r2, #3
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	4093      	lsls	r3, r2
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001720:	4935      	ldr	r1, [pc, #212]	; (80017f8 <HAL_GPIO_Init+0x310>)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	3302      	adds	r3, #2
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_GPIO_Init+0x334>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001752:	4a32      	ldr	r2, [pc, #200]	; (800181c <HAL_GPIO_Init+0x334>)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001758:	4b30      	ldr	r3, [pc, #192]	; (800181c <HAL_GPIO_Init+0x334>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800177c:	4a27      	ldr	r2, [pc, #156]	; (800181c <HAL_GPIO_Init+0x334>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <HAL_GPIO_Init+0x334>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017a6:	4a1d      	ldr	r2, [pc, #116]	; (800181c <HAL_GPIO_Init+0x334>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_GPIO_Init+0x334>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d0:	4a12      	ldr	r2, [pc, #72]	; (800181c <HAL_GPIO_Init+0x334>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3301      	adds	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	f67f ae90 	bls.w	8001504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40013800 	.word	0x40013800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400
 8001804:	40020800 	.word	0x40020800
 8001808:	40020c00 	.word	0x40020c00
 800180c:	40021000 	.word	0x40021000
 8001810:	40021400 	.word	0x40021400
 8001814:	40021800 	.word	0x40021800
 8001818:	40021c00 	.word	0x40021c00
 800181c:	40013c00 	.word	0x40013c00

08001820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
 800182c:	4613      	mov	r3, r2
 800182e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001830:	787b      	ldrb	r3, [r7, #1]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800183c:	e003      	b.n	8001846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	041a      	lsls	r2, r3, #16
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	619a      	str	r2, [r3, #24]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e264      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d075      	beq.n	800195e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001872:	4ba3      	ldr	r3, [pc, #652]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b04      	cmp	r3, #4
 800187c:	d00c      	beq.n	8001898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187e:	4ba0      	ldr	r3, [pc, #640]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001886:	2b08      	cmp	r3, #8
 8001888:	d112      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188a:	4b9d      	ldr	r3, [pc, #628]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001896:	d10b      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	4b99      	ldr	r3, [pc, #612]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d05b      	beq.n	800195c <HAL_RCC_OscConfig+0x108>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d157      	bne.n	800195c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e23f      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b8:	d106      	bne.n	80018c8 <HAL_RCC_OscConfig+0x74>
 80018ba:	4b91      	ldr	r3, [pc, #580]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a90      	ldr	r2, [pc, #576]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e01d      	b.n	8001904 <HAL_RCC_OscConfig+0xb0>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x98>
 80018d2:	4b8b      	ldr	r3, [pc, #556]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a8a      	ldr	r2, [pc, #552]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a87      	ldr	r2, [pc, #540]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0xb0>
 80018ec:	4b84      	ldr	r3, [pc, #528]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a83      	ldr	r2, [pc, #524]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b81      	ldr	r3, [pc, #516]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a80      	ldr	r2, [pc, #512]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d013      	beq.n	8001934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fc3c 	bl	8001188 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff fc38 	bl	8001188 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e204      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0xc0>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fc28 	bl	8001188 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fc24 	bl	8001188 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e1f0      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	4b6c      	ldr	r3, [pc, #432]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0xe8>
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d063      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800196a:	4b65      	ldr	r3, [pc, #404]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001976:	4b62      	ldr	r3, [pc, #392]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800197e:	2b08      	cmp	r3, #8
 8001980:	d11c      	bne.n	80019bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001982:	4b5f      	ldr	r3, [pc, #380]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d116      	bne.n	80019bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	4b5c      	ldr	r3, [pc, #368]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_RCC_OscConfig+0x152>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d001      	beq.n	80019a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e1c4      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a6:	4b56      	ldr	r3, [pc, #344]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4952      	ldr	r1, [pc, #328]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	e03a      	b.n	8001a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <HAL_RCC_OscConfig+0x2b0>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff fbdd 	bl	8001188 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff fbd9 	bl	8001188 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e1a5      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	4b46      	ldr	r3, [pc, #280]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f0:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4940      	ldr	r1, [pc, #256]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
 8001a04:	e015      	b.n	8001a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a06:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <HAL_RCC_OscConfig+0x2b0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fbbc 	bl	8001188 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff fbb8 	bl	8001188 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e184      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d030      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d016      	beq.n	8001a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a46:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <HAL_RCC_OscConfig+0x2b4>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fb9c 	bl	8001188 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff fb98 	bl	8001188 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e164      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x200>
 8001a72:	e015      	b.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_RCC_OscConfig+0x2b4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fb85 	bl	8001188 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a82:	f7ff fb81 	bl	8001188 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e14d      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80a0 	beq.w	8001bee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10f      	bne.n	8001ade <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_OscConfig+0x2b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d121      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_RCC_OscConfig+0x2b8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_RCC_OscConfig+0x2b8>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af6:	f7ff fb47 	bl	8001188 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	e011      	b.n	8001b22 <HAL_RCC_OscConfig+0x2ce>
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	42470000 	.word	0x42470000
 8001b08:	42470e80 	.word	0x42470e80
 8001b0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b10:	f7ff fb3a 	bl	8001188 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e106      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b22:	4b85      	ldr	r3, [pc, #532]	; (8001d38 <HAL_RCC_OscConfig+0x4e4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
 8001b36:	4b81      	ldr	r3, [pc, #516]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	4a80      	ldr	r2, [pc, #512]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6713      	str	r3, [r2, #112]	; 0x70
 8001b42:	e01c      	b.n	8001b7e <HAL_RCC_OscConfig+0x32a>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d10c      	bne.n	8001b66 <HAL_RCC_OscConfig+0x312>
 8001b4c:	4b7b      	ldr	r3, [pc, #492]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b50:	4a7a      	ldr	r2, [pc, #488]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	6713      	str	r3, [r2, #112]	; 0x70
 8001b58:	4b78      	ldr	r3, [pc, #480]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5c:	4a77      	ldr	r2, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6713      	str	r3, [r2, #112]	; 0x70
 8001b64:	e00b      	b.n	8001b7e <HAL_RCC_OscConfig+0x32a>
 8001b66:	4b75      	ldr	r3, [pc, #468]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a74      	ldr	r2, [pc, #464]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70
 8001b72:	4b72      	ldr	r3, [pc, #456]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	4a71      	ldr	r2, [pc, #452]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001b78:	f023 0304 	bic.w	r3, r3, #4
 8001b7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d015      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b86:	f7ff faff 	bl	8001188 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8e:	f7ff fafb 	bl	8001188 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0c5      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba4:	4b65      	ldr	r3, [pc, #404]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0ee      	beq.n	8001b8e <HAL_RCC_OscConfig+0x33a>
 8001bb0:	e014      	b.n	8001bdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fae9 	bl	8001188 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7ff fae5 	bl	8001188 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e0af      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd0:	4b5a      	ldr	r3, [pc, #360]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1ee      	bne.n	8001bba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d105      	bne.n	8001bee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be2:	4b56      	ldr	r3, [pc, #344]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a55      	ldr	r2, [pc, #340]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 809b 	beq.w	8001d2e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bf8:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d05c      	beq.n	8001cbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d141      	bne.n	8001c90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0c:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <HAL_RCC_OscConfig+0x4ec>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7ff fab9 	bl	8001188 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7ff fab5 	bl	8001188 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e081      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2c:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69da      	ldr	r2, [r3, #28]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	019b      	lsls	r3, r3, #6
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	3b01      	subs	r3, #1
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	061b      	lsls	r3, r3, #24
 8001c5c:	4937      	ldr	r1, [pc, #220]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c62:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <HAL_RCC_OscConfig+0x4ec>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fa8e 	bl	8001188 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff fa8a 	bl	8001188 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e056      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x41c>
 8001c8e:	e04e      	b.n	8001d2e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <HAL_RCC_OscConfig+0x4ec>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fa77 	bl	8001188 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff fa73 	bl	8001188 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e03f      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb0:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x44a>
 8001cbc:	e037      	b.n	8001d2e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e032      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <HAL_RCC_OscConfig+0x4e8>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d028      	beq.n	8001d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d121      	bne.n	8001d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d11a      	bne.n	8001d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d00:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d111      	bne.n	8001d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	085b      	lsrs	r3, r3, #1
 8001d12:	3b01      	subs	r3, #1
 8001d14:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d107      	bne.n	8001d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	42470060 	.word	0x42470060

08001d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0cc      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b68      	ldr	r3, [pc, #416]	; (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d90c      	bls.n	8001d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b65      	ldr	r3, [pc, #404]	; (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b63      	ldr	r3, [pc, #396]	; (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0b8      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d020      	beq.n	8001dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d98:	4b59      	ldr	r3, [pc, #356]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	4a58      	ldr	r2, [pc, #352]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db0:	4b53      	ldr	r3, [pc, #332]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4a52      	ldr	r2, [pc, #328]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dbc:	4b50      	ldr	r3, [pc, #320]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	494d      	ldr	r1, [pc, #308]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d044      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d119      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e07f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e02:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e06f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e12:	4b3b      	ldr	r3, [pc, #236]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e067      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e22:	4b37      	ldr	r3, [pc, #220]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f023 0203 	bic.w	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4934      	ldr	r1, [pc, #208]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e34:	f7ff f9a8 	bl	8001188 <HAL_GetTick>
 8001e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3c:	f7ff f9a4 	bl	8001188 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e04f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 020c 	and.w	r2, r3, #12
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1eb      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d20c      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b22      	ldr	r3, [pc, #136]	; (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e032      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4916      	ldr	r1, [pc, #88]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	490e      	ldr	r1, [pc, #56]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eca:	f000 f821 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	490a      	ldr	r1, [pc, #40]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	5ccb      	ldrb	r3, [r1, r3]
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f908 	bl	8001100 <HAL_InitTick>

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023c00 	.word	0x40023c00
 8001f00:	40023800 	.word	0x40023800
 8001f04:	08006a0c 	.word	0x08006a0c
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	20000004 	.word	0x20000004

08001f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f10:	b5b0      	push	{r4, r5, r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f16:	2100      	movs	r1, #0
 8001f18:	6079      	str	r1, [r7, #4]
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	60f9      	str	r1, [r7, #12]
 8001f1e:	2100      	movs	r1, #0
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f22:	2100      	movs	r1, #0
 8001f24:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f26:	4952      	ldr	r1, [pc, #328]	; (8002070 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f28:	6889      	ldr	r1, [r1, #8]
 8001f2a:	f001 010c 	and.w	r1, r1, #12
 8001f2e:	2908      	cmp	r1, #8
 8001f30:	d00d      	beq.n	8001f4e <HAL_RCC_GetSysClockFreq+0x3e>
 8001f32:	2908      	cmp	r1, #8
 8001f34:	f200 8094 	bhi.w	8002060 <HAL_RCC_GetSysClockFreq+0x150>
 8001f38:	2900      	cmp	r1, #0
 8001f3a:	d002      	beq.n	8001f42 <HAL_RCC_GetSysClockFreq+0x32>
 8001f3c:	2904      	cmp	r1, #4
 8001f3e:	d003      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0x38>
 8001f40:	e08e      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f42:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f44:	60bb      	str	r3, [r7, #8]
       break;
 8001f46:	e08e      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f48:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f4a:	60bb      	str	r3, [r7, #8]
      break;
 8001f4c:	e08b      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f4e:	4948      	ldr	r1, [pc, #288]	; (8002070 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f50:	6849      	ldr	r1, [r1, #4]
 8001f52:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001f56:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f58:	4945      	ldr	r1, [pc, #276]	; (8002070 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f5a:	6849      	ldr	r1, [r1, #4]
 8001f5c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001f60:	2900      	cmp	r1, #0
 8001f62:	d024      	beq.n	8001fae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f64:	4942      	ldr	r1, [pc, #264]	; (8002070 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f66:	6849      	ldr	r1, [r1, #4]
 8001f68:	0989      	lsrs	r1, r1, #6
 8001f6a:	4608      	mov	r0, r1
 8001f6c:	f04f 0100 	mov.w	r1, #0
 8001f70:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001f74:	f04f 0500 	mov.w	r5, #0
 8001f78:	ea00 0204 	and.w	r2, r0, r4
 8001f7c:	ea01 0305 	and.w	r3, r1, r5
 8001f80:	493d      	ldr	r1, [pc, #244]	; (8002078 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f82:	fb01 f003 	mul.w	r0, r1, r3
 8001f86:	2100      	movs	r1, #0
 8001f88:	fb01 f102 	mul.w	r1, r1, r2
 8001f8c:	1844      	adds	r4, r0, r1
 8001f8e:	493a      	ldr	r1, [pc, #232]	; (8002078 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f90:	fba2 0101 	umull	r0, r1, r2, r1
 8001f94:	1863      	adds	r3, r4, r1
 8001f96:	4619      	mov	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	f7fe f916 	bl	80001d0 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e04a      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fae:	4b30      	ldr	r3, [pc, #192]	; (8002070 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	099b      	lsrs	r3, r3, #6
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fbe:	f04f 0100 	mov.w	r1, #0
 8001fc2:	ea02 0400 	and.w	r4, r2, r0
 8001fc6:	ea03 0501 	and.w	r5, r3, r1
 8001fca:	4620      	mov	r0, r4
 8001fcc:	4629      	mov	r1, r5
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	014b      	lsls	r3, r1, #5
 8001fd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fdc:	0142      	lsls	r2, r0, #5
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	1b00      	subs	r0, r0, r4
 8001fe4:	eb61 0105 	sbc.w	r1, r1, r5
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	018b      	lsls	r3, r1, #6
 8001ff2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ff6:	0182      	lsls	r2, r0, #6
 8001ff8:	1a12      	subs	r2, r2, r0
 8001ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8001ffe:	f04f 0000 	mov.w	r0, #0
 8002002:	f04f 0100 	mov.w	r1, #0
 8002006:	00d9      	lsls	r1, r3, #3
 8002008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800200c:	00d0      	lsls	r0, r2, #3
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	1912      	adds	r2, r2, r4
 8002014:	eb45 0303 	adc.w	r3, r5, r3
 8002018:	f04f 0000 	mov.w	r0, #0
 800201c:	f04f 0100 	mov.w	r1, #0
 8002020:	0299      	lsls	r1, r3, #10
 8002022:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002026:	0290      	lsls	r0, r2, #10
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	461a      	mov	r2, r3
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	f7fe f8ca 	bl	80001d0 <__aeabi_uldivmod>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4613      	mov	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_RCC_GetSysClockFreq+0x160>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	3301      	adds	r3, #1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	60bb      	str	r3, [r7, #8]
      break;
 800205e:	e002      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <HAL_RCC_GetSysClockFreq+0x164>)
 8002062:	60bb      	str	r3, [r7, #8]
      break;
 8002064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002066:	68bb      	ldr	r3, [r7, #8]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bdb0      	pop	{r4, r5, r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	00f42400 	.word	0x00f42400
 8002078:	017d7840 	.word	0x017d7840

0800207c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <HAL_RCC_GetHCLKFreq+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000000 	.word	0x20000000

08002094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002098:	f7ff fff0 	bl	800207c <HAL_RCC_GetHCLKFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	0a9b      	lsrs	r3, r3, #10
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	4903      	ldr	r1, [pc, #12]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40023800 	.word	0x40023800
 80020b8:	08006a1c 	.word	0x08006a1c

080020bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020c0:	f7ff ffdc 	bl	800207c <HAL_RCC_GetHCLKFreq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	0b5b      	lsrs	r3, r3, #13
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	4903      	ldr	r1, [pc, #12]	; (80020e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40023800 	.word	0x40023800
 80020e0:	08006a1c 	.word	0x08006a1c

080020e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e041      	b.n	800217a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fdea 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3304      	adds	r3, #4
 8002120:	4619      	mov	r1, r3
 8002122:	4610      	mov	r0, r2
 8002124:	f000 fc0c 	bl	8002940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e041      	b.n	8002218 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d106      	bne.n	80021ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f839 	bl	8002220 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2202      	movs	r2, #2
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3304      	adds	r3, #4
 80021be:	4619      	mov	r1, r3
 80021c0:	4610      	mov	r0, r2
 80021c2:	f000 fbbd 	bl	8002940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <HAL_TIM_PWM_Start+0x24>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b01      	cmp	r3, #1
 800224e:	bf14      	ite	ne
 8002250:	2301      	movne	r3, #1
 8002252:	2300      	moveq	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	e022      	b.n	800229e <HAL_TIM_PWM_Start+0x6a>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2b04      	cmp	r3, #4
 800225c:	d109      	bne.n	8002272 <HAL_TIM_PWM_Start+0x3e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b01      	cmp	r3, #1
 8002268:	bf14      	ite	ne
 800226a:	2301      	movne	r3, #1
 800226c:	2300      	moveq	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	e015      	b.n	800229e <HAL_TIM_PWM_Start+0x6a>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b08      	cmp	r3, #8
 8002276:	d109      	bne.n	800228c <HAL_TIM_PWM_Start+0x58>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	bf14      	ite	ne
 8002284:	2301      	movne	r3, #1
 8002286:	2300      	moveq	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	e008      	b.n	800229e <HAL_TIM_PWM_Start+0x6a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b01      	cmp	r3, #1
 8002296:	bf14      	ite	ne
 8002298:	2301      	movne	r3, #1
 800229a:	2300      	moveq	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e07c      	b.n	80023a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d104      	bne.n	80022b6 <HAL_TIM_PWM_Start+0x82>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022b4:	e013      	b.n	80022de <HAL_TIM_PWM_Start+0xaa>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d104      	bne.n	80022c6 <HAL_TIM_PWM_Start+0x92>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c4:	e00b      	b.n	80022de <HAL_TIM_PWM_Start+0xaa>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d104      	bne.n	80022d6 <HAL_TIM_PWM_Start+0xa2>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d4:	e003      	b.n	80022de <HAL_TIM_PWM_Start+0xaa>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2201      	movs	r2, #1
 80022e4:	6839      	ldr	r1, [r7, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fe14 	bl	8002f14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a2d      	ldr	r2, [pc, #180]	; (80023a8 <HAL_TIM_PWM_Start+0x174>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d004      	beq.n	8002300 <HAL_TIM_PWM_Start+0xcc>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a2c      	ldr	r2, [pc, #176]	; (80023ac <HAL_TIM_PWM_Start+0x178>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d101      	bne.n	8002304 <HAL_TIM_PWM_Start+0xd0>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_TIM_PWM_Start+0xd2>
 8002304:	2300      	movs	r3, #0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a22      	ldr	r2, [pc, #136]	; (80023a8 <HAL_TIM_PWM_Start+0x174>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d022      	beq.n	800236a <HAL_TIM_PWM_Start+0x136>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232c:	d01d      	beq.n	800236a <HAL_TIM_PWM_Start+0x136>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1f      	ldr	r2, [pc, #124]	; (80023b0 <HAL_TIM_PWM_Start+0x17c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d018      	beq.n	800236a <HAL_TIM_PWM_Start+0x136>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <HAL_TIM_PWM_Start+0x180>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_TIM_PWM_Start+0x136>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_TIM_PWM_Start+0x184>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d00e      	beq.n	800236a <HAL_TIM_PWM_Start+0x136>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a16      	ldr	r2, [pc, #88]	; (80023ac <HAL_TIM_PWM_Start+0x178>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d009      	beq.n	800236a <HAL_TIM_PWM_Start+0x136>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a18      	ldr	r2, [pc, #96]	; (80023bc <HAL_TIM_PWM_Start+0x188>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d004      	beq.n	800236a <HAL_TIM_PWM_Start+0x136>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a16      	ldr	r2, [pc, #88]	; (80023c0 <HAL_TIM_PWM_Start+0x18c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d111      	bne.n	800238e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b06      	cmp	r3, #6
 800237a:	d010      	beq.n	800239e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238c:	e007      	b.n	800239e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0201 	orr.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40010400 	.word	0x40010400
 80023b0:	40000400 	.word	0x40000400
 80023b4:	40000800 	.word	0x40000800
 80023b8:	40000c00 	.word	0x40000c00
 80023bc:	40014000 	.word	0x40014000
 80023c0:	40001800 	.word	0x40001800

080023c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e097      	b.n	8002508 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7fe fcd7 	bl	8000da0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002408:	f023 0307 	bic.w	r3, r3, #7
 800240c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	4619      	mov	r1, r3
 8002418:	4610      	mov	r0, r2
 800241a:	f000 fa91 	bl	8002940 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002446:	f023 0303 	bic.w	r3, r3, #3
 800244a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	4313      	orrs	r3, r2
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002464:	f023 030c 	bic.w	r3, r3, #12
 8002468:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002470:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002474:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	4313      	orrs	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	011a      	lsls	r2, r3, #4
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	031b      	lsls	r3, r3, #12
 8002494:	4313      	orrs	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80024a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80024aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	4313      	orrs	r3, r2
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002520:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002528:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002530:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002538:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d110      	bne.n	8002562 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d102      	bne.n	800254c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002546:	7b7b      	ldrb	r3, [r7, #13]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d001      	beq.n	8002550 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e069      	b.n	8002624 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002560:	e031      	b.n	80025c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d110      	bne.n	800258a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002568:	7bbb      	ldrb	r3, [r7, #14]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d102      	bne.n	8002574 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800256e:	7b3b      	ldrb	r3, [r7, #12]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d001      	beq.n	8002578 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e055      	b.n	8002624 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002588:	e01d      	b.n	80025c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d108      	bne.n	80025a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002590:	7bbb      	ldrb	r3, [r7, #14]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d105      	bne.n	80025a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002596:	7b7b      	ldrb	r3, [r7, #13]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d102      	bne.n	80025a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800259c:	7b3b      	ldrb	r3, [r7, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d001      	beq.n	80025a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e03e      	b.n	8002624 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2202      	movs	r2, #2
 80025aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2202      	movs	r2, #2
 80025c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_TIM_Encoder_Start+0xc4>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d008      	beq.n	80025e4 <HAL_TIM_Encoder_Start+0xd4>
 80025d2:	e00f      	b.n	80025f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2201      	movs	r2, #1
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fc99 	bl	8002f14 <TIM_CCxChannelCmd>
      break;
 80025e2:	e016      	b.n	8002612 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2201      	movs	r2, #1
 80025ea:	2104      	movs	r1, #4
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fc91 	bl	8002f14 <TIM_CCxChannelCmd>
      break;
 80025f2:	e00e      	b.n	8002612 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2201      	movs	r2, #1
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 fc89 	bl	8002f14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2201      	movs	r2, #1
 8002608:	2104      	movs	r1, #4
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fc82 	bl	8002f14 <TIM_CCxChannelCmd>
      break;
 8002610:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002646:	2302      	movs	r3, #2
 8002648:	e0ae      	b.n	80027a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	f200 809f 	bhi.w	8002798 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800265a:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800265c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002660:	08002695 	.word	0x08002695
 8002664:	08002799 	.word	0x08002799
 8002668:	08002799 	.word	0x08002799
 800266c:	08002799 	.word	0x08002799
 8002670:	080026d5 	.word	0x080026d5
 8002674:	08002799 	.word	0x08002799
 8002678:	08002799 	.word	0x08002799
 800267c:	08002799 	.word	0x08002799
 8002680:	08002717 	.word	0x08002717
 8002684:	08002799 	.word	0x08002799
 8002688:	08002799 	.word	0x08002799
 800268c:	08002799 	.word	0x08002799
 8002690:	08002757 	.word	0x08002757
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f9f0 	bl	8002a80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0208 	orr.w	r2, r2, #8
 80026ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0204 	bic.w	r2, r2, #4
 80026be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6999      	ldr	r1, [r3, #24]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	619a      	str	r2, [r3, #24]
      break;
 80026d2:	e064      	b.n	800279e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fa40 	bl	8002b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6999      	ldr	r1, [r3, #24]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	021a      	lsls	r2, r3, #8
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	619a      	str	r2, [r3, #24]
      break;
 8002714:	e043      	b.n	800279e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fa95 	bl	8002c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0208 	orr.w	r2, r2, #8
 8002730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69da      	ldr	r2, [r3, #28]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0204 	bic.w	r2, r2, #4
 8002740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69d9      	ldr	r1, [r3, #28]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	61da      	str	r2, [r3, #28]
      break;
 8002754:	e023      	b.n	800279e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fae9 	bl	8002d34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69da      	ldr	r2, [r3, #28]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69da      	ldr	r2, [r3, #28]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69d9      	ldr	r1, [r3, #28]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	021a      	lsls	r2, r3, #8
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	61da      	str	r2, [r3, #28]
      break;
 8002796:	e002      	b.n	800279e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	75fb      	strb	r3, [r7, #23]
      break;
 800279c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_TIM_ConfigClockSource+0x1c>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e0b4      	b.n	8002936 <HAL_TIM_ConfigClockSource+0x186>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002804:	d03e      	beq.n	8002884 <HAL_TIM_ConfigClockSource+0xd4>
 8002806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800280a:	f200 8087 	bhi.w	800291c <HAL_TIM_ConfigClockSource+0x16c>
 800280e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002812:	f000 8086 	beq.w	8002922 <HAL_TIM_ConfigClockSource+0x172>
 8002816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281a:	d87f      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
 800281c:	2b70      	cmp	r3, #112	; 0x70
 800281e:	d01a      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0xa6>
 8002820:	2b70      	cmp	r3, #112	; 0x70
 8002822:	d87b      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
 8002824:	2b60      	cmp	r3, #96	; 0x60
 8002826:	d050      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0x11a>
 8002828:	2b60      	cmp	r3, #96	; 0x60
 800282a:	d877      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
 800282c:	2b50      	cmp	r3, #80	; 0x50
 800282e:	d03c      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0xfa>
 8002830:	2b50      	cmp	r3, #80	; 0x50
 8002832:	d873      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d058      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x13a>
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	d86f      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
 800283c:	2b30      	cmp	r3, #48	; 0x30
 800283e:	d064      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x15a>
 8002840:	2b30      	cmp	r3, #48	; 0x30
 8002842:	d86b      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
 8002844:	2b20      	cmp	r3, #32
 8002846:	d060      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x15a>
 8002848:	2b20      	cmp	r3, #32
 800284a:	d867      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
 800284c:	2b00      	cmp	r3, #0
 800284e:	d05c      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x15a>
 8002850:	2b10      	cmp	r3, #16
 8002852:	d05a      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x15a>
 8002854:	e062      	b.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6899      	ldr	r1, [r3, #8]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f000 fb35 	bl	8002ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002878:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	609a      	str	r2, [r3, #8]
      break;
 8002882:	e04f      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	6899      	ldr	r1, [r3, #8]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f000 fb1e 	bl	8002ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028a6:	609a      	str	r2, [r3, #8]
      break;
 80028a8:	e03c      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	461a      	mov	r2, r3
 80028b8:	f000 fa92 	bl	8002de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2150      	movs	r1, #80	; 0x50
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 faeb 	bl	8002e9e <TIM_ITRx_SetConfig>
      break;
 80028c8:	e02c      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f000 fab1 	bl	8002e3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2160      	movs	r1, #96	; 0x60
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fadb 	bl	8002e9e <TIM_ITRx_SetConfig>
      break;
 80028e8:	e01c      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	461a      	mov	r2, r3
 80028f8:	f000 fa72 	bl	8002de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2140      	movs	r1, #64	; 0x40
 8002902:	4618      	mov	r0, r3
 8002904:	f000 facb 	bl	8002e9e <TIM_ITRx_SetConfig>
      break;
 8002908:	e00c      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4619      	mov	r1, r3
 8002914:	4610      	mov	r0, r2
 8002916:	f000 fac2 	bl	8002e9e <TIM_ITRx_SetConfig>
      break;
 800291a:	e003      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
      break;
 8002920:	e000      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a40      	ldr	r2, [pc, #256]	; (8002a54 <TIM_Base_SetConfig+0x114>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d013      	beq.n	8002980 <TIM_Base_SetConfig+0x40>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295e:	d00f      	beq.n	8002980 <TIM_Base_SetConfig+0x40>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a3d      	ldr	r2, [pc, #244]	; (8002a58 <TIM_Base_SetConfig+0x118>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00b      	beq.n	8002980 <TIM_Base_SetConfig+0x40>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a3c      	ldr	r2, [pc, #240]	; (8002a5c <TIM_Base_SetConfig+0x11c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d007      	beq.n	8002980 <TIM_Base_SetConfig+0x40>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a3b      	ldr	r2, [pc, #236]	; (8002a60 <TIM_Base_SetConfig+0x120>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d003      	beq.n	8002980 <TIM_Base_SetConfig+0x40>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a3a      	ldr	r2, [pc, #232]	; (8002a64 <TIM_Base_SetConfig+0x124>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d108      	bne.n	8002992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a2f      	ldr	r2, [pc, #188]	; (8002a54 <TIM_Base_SetConfig+0x114>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d02b      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a0:	d027      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a2c      	ldr	r2, [pc, #176]	; (8002a58 <TIM_Base_SetConfig+0x118>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d023      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a2b      	ldr	r2, [pc, #172]	; (8002a5c <TIM_Base_SetConfig+0x11c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01f      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a2a      	ldr	r2, [pc, #168]	; (8002a60 <TIM_Base_SetConfig+0x120>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d01b      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a29      	ldr	r2, [pc, #164]	; (8002a64 <TIM_Base_SetConfig+0x124>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d017      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a28      	ldr	r2, [pc, #160]	; (8002a68 <TIM_Base_SetConfig+0x128>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a27      	ldr	r2, [pc, #156]	; (8002a6c <TIM_Base_SetConfig+0x12c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00f      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a26      	ldr	r2, [pc, #152]	; (8002a70 <TIM_Base_SetConfig+0x130>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00b      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a25      	ldr	r2, [pc, #148]	; (8002a74 <TIM_Base_SetConfig+0x134>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a24      	ldr	r2, [pc, #144]	; (8002a78 <TIM_Base_SetConfig+0x138>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d003      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a23      	ldr	r2, [pc, #140]	; (8002a7c <TIM_Base_SetConfig+0x13c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d108      	bne.n	8002a04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <TIM_Base_SetConfig+0x114>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d003      	beq.n	8002a38 <TIM_Base_SetConfig+0xf8>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a0c      	ldr	r2, [pc, #48]	; (8002a64 <TIM_Base_SetConfig+0x124>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d103      	bne.n	8002a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	615a      	str	r2, [r3, #20]
}
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40000800 	.word	0x40000800
 8002a60:	40000c00 	.word	0x40000c00
 8002a64:	40010400 	.word	0x40010400
 8002a68:	40014000 	.word	0x40014000
 8002a6c:	40014400 	.word	0x40014400
 8002a70:	40014800 	.word	0x40014800
 8002a74:	40001800 	.word	0x40001800
 8002a78:	40001c00 	.word	0x40001c00
 8002a7c:	40002000 	.word	0x40002000

08002a80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f023 0201 	bic.w	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0303 	bic.w	r3, r3, #3
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f023 0302 	bic.w	r3, r3, #2
 8002ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a20      	ldr	r2, [pc, #128]	; (8002b58 <TIM_OC1_SetConfig+0xd8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d003      	beq.n	8002ae4 <TIM_OC1_SetConfig+0x64>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <TIM_OC1_SetConfig+0xdc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d10c      	bne.n	8002afe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f023 0308 	bic.w	r3, r3, #8
 8002aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f023 0304 	bic.w	r3, r3, #4
 8002afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a15      	ldr	r2, [pc, #84]	; (8002b58 <TIM_OC1_SetConfig+0xd8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d003      	beq.n	8002b0e <TIM_OC1_SetConfig+0x8e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <TIM_OC1_SetConfig+0xdc>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d111      	bne.n	8002b32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	621a      	str	r2, [r3, #32]
}
 8002b4c:	bf00      	nop
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	40010000 	.word	0x40010000
 8002b5c:	40010400 	.word	0x40010400

08002b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f023 0210 	bic.w	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	021b      	lsls	r3, r3, #8
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f023 0320 	bic.w	r3, r3, #32
 8002baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a22      	ldr	r2, [pc, #136]	; (8002c44 <TIM_OC2_SetConfig+0xe4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d003      	beq.n	8002bc8 <TIM_OC2_SetConfig+0x68>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a21      	ldr	r2, [pc, #132]	; (8002c48 <TIM_OC2_SetConfig+0xe8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d10d      	bne.n	8002be4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002be2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a17      	ldr	r2, [pc, #92]	; (8002c44 <TIM_OC2_SetConfig+0xe4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <TIM_OC2_SetConfig+0x94>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a16      	ldr	r2, [pc, #88]	; (8002c48 <TIM_OC2_SetConfig+0xe8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d113      	bne.n	8002c1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	621a      	str	r2, [r3, #32]
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40010000 	.word	0x40010000
 8002c48:	40010400 	.word	0x40010400

08002c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0303 	bic.w	r3, r3, #3
 8002c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a21      	ldr	r2, [pc, #132]	; (8002d2c <TIM_OC3_SetConfig+0xe0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d003      	beq.n	8002cb2 <TIM_OC3_SetConfig+0x66>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a20      	ldr	r2, [pc, #128]	; (8002d30 <TIM_OC3_SetConfig+0xe4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10d      	bne.n	8002cce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a16      	ldr	r2, [pc, #88]	; (8002d2c <TIM_OC3_SetConfig+0xe0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d003      	beq.n	8002cde <TIM_OC3_SetConfig+0x92>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <TIM_OC3_SetConfig+0xe4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d113      	bne.n	8002d06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	621a      	str	r2, [r3, #32]
}
 8002d20:	bf00      	nop
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	40010000 	.word	0x40010000
 8002d30:	40010400 	.word	0x40010400

08002d34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	031b      	lsls	r3, r3, #12
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <TIM_OC4_SetConfig+0xa4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d003      	beq.n	8002d9c <TIM_OC4_SetConfig+0x68>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <TIM_OC4_SetConfig+0xa8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d109      	bne.n	8002db0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002da2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	019b      	lsls	r3, r3, #6
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	621a      	str	r2, [r3, #32]
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40010000 	.word	0x40010000
 8002ddc:	40010400 	.word	0x40010400

08002de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	f023 0201 	bic.w	r2, r3, #1
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f023 030a 	bic.w	r3, r3, #10
 8002e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	621a      	str	r2, [r3, #32]
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f023 0210 	bic.w	r2, r3, #16
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	031b      	lsls	r3, r3, #12
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	621a      	str	r2, [r3, #32]
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f043 0307 	orr.w	r3, r3, #7
 8002ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	609a      	str	r2, [r3, #8]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	021a      	lsls	r2, r3, #8
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	609a      	str	r2, [r3, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	371c      	adds	r7, #28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	2201      	movs	r2, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a1a      	ldr	r2, [r3, #32]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	401a      	ands	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a1a      	ldr	r2, [r3, #32]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	621a      	str	r2, [r3, #32]
}
 8002f52:	bf00      	nop
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e05a      	b.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a21      	ldr	r2, [pc, #132]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d022      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc4:	d01d      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1d      	ldr	r2, [pc, #116]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d018      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1a      	ldr	r2, [pc, #104]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00e      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a18      	ldr	r2, [pc, #96]	; (800304c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d009      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a17      	ldr	r2, [pc, #92]	; (8003050 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a15      	ldr	r2, [pc, #84]	; (8003054 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d10c      	bne.n	800301c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003008:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	4313      	orrs	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800
 8003048:	40000c00 	.word	0x40000c00
 800304c:	40010400 	.word	0x40010400
 8003050:	40014000 	.word	0x40014000
 8003054:	40001800 	.word	0x40001800

08003058 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003070:	2302      	movs	r3, #2
 8003072:	e03d      	b.n	80030f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e03f      	b.n	800318e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fd ff10 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2224      	movs	r2, #36	; 0x24
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800313e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fc7b 	bl	8003a3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003154:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003164:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003174:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b0ba      	sub	sp, #232	; 0xe8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10f      	bne.n	80031fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_UART_IRQHandler+0x66>
 80031ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fb65 	bl	80038c6 <UART_Receive_IT>
      return;
 80031fc:	e256      	b.n	80036ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80de 	beq.w	80033c4 <HAL_UART_IRQHandler+0x22c>
 8003208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d106      	bne.n	8003222 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003218:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80d1 	beq.w	80033c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <HAL_UART_IRQHandler+0xae>
 800322e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_UART_IRQHandler+0xd2>
 8003252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f043 0202 	orr.w	r2, r3, #2
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_UART_IRQHandler+0xf6>
 8003276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f043 0204 	orr.w	r2, r3, #4
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d011      	beq.n	80032be <HAL_UART_IRQHandler+0x126>
 800329a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d105      	bne.n	80032b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f043 0208 	orr.w	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 81ed 	beq.w	80036a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_UART_IRQHandler+0x14e>
 80032d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 faf0 	bl	80038c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <HAL_UART_IRQHandler+0x17a>
 800330a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800330e:	2b00      	cmp	r3, #0
 8003310:	d04f      	beq.n	80033b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f9f8 	bl	8003708 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b40      	cmp	r3, #64	; 0x40
 8003324:	d141      	bne.n	80033aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3314      	adds	r3, #20
 800332c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800333c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3314      	adds	r3, #20
 800334e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003352:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800335e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800336a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1d9      	bne.n	8003326 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	2b00      	cmp	r3, #0
 8003378:	d013      	beq.n	80033a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	4a7d      	ldr	r2, [pc, #500]	; (8003574 <HAL_UART_IRQHandler+0x3dc>)
 8003380:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe f88b 	bl	80014a2 <HAL_DMA_Abort_IT>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d016      	beq.n	80033c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800339c:	4610      	mov	r0, r2
 800339e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a0:	e00e      	b.n	80033c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f99a 	bl	80036dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a8:	e00a      	b.n	80033c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f996 	bl	80036dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	e006      	b.n	80033c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f992 	bl	80036dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033be:	e170      	b.n	80036a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	bf00      	nop
    return;
 80033c2:	e16e      	b.n	80036a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	f040 814a 	bne.w	8003662 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8143 	beq.w	8003662 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 813c 	beq.w	8003662 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340a:	2b40      	cmp	r3, #64	; 0x40
 800340c:	f040 80b4 	bne.w	8003578 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800341c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8140 	beq.w	80036a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800342a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800342e:	429a      	cmp	r2, r3
 8003430:	f080 8139 	bcs.w	80036a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800343a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003446:	f000 8088 	beq.w	800355a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003460:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003468:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003476:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800347a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003482:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800348e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1d9      	bne.n	800344a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3314      	adds	r3, #20
 800349c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3314      	adds	r3, #20
 80034b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e1      	bne.n	8003496 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3314      	adds	r3, #20
 80034d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3314      	adds	r3, #20
 80034f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e3      	bne.n	80034d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	330c      	adds	r3, #12
 800351e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003522:	e853 3f00 	ldrex	r3, [r3]
 8003526:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352a:	f023 0310 	bic.w	r3, r3, #16
 800352e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	330c      	adds	r3, #12
 8003538:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800353c:	65ba      	str	r2, [r7, #88]	; 0x58
 800353e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800354a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e3      	bne.n	8003518 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd ff34 	bl	80013c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003562:	b29b      	uxth	r3, r3
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	b29b      	uxth	r3, r3
 8003568:	4619      	mov	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f8c0 	bl	80036f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003570:	e099      	b.n	80036a6 <HAL_UART_IRQHandler+0x50e>
 8003572:	bf00      	nop
 8003574:	080037cf 	.word	0x080037cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003580:	b29b      	uxth	r3, r3
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 808b 	beq.w	80036aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003594:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 8086 	beq.w	80036aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	330c      	adds	r3, #12
 80035a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	330c      	adds	r3, #12
 80035be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035c2:	647a      	str	r2, [r7, #68]	; 0x44
 80035c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e3      	bne.n	800359e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3314      	adds	r3, #20
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	623b      	str	r3, [r7, #32]
   return(result);
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3314      	adds	r3, #20
 80035f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035fa:	633a      	str	r2, [r7, #48]	; 0x30
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e3      	bne.n	80035d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	60fb      	str	r3, [r7, #12]
   return(result);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0310 	bic.w	r3, r3, #16
 8003632:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	330c      	adds	r3, #12
 800363c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003640:	61fa      	str	r2, [r7, #28]
 8003642:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003644:	69b9      	ldr	r1, [r7, #24]
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	e841 2300 	strex	r3, r2, [r1]
 800364c:	617b      	str	r3, [r7, #20]
   return(result);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e3      	bne.n	800361c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f848 	bl	80036f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003660:	e023      	b.n	80036aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_UART_IRQHandler+0x4ea>
 800366e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8bb 	bl	80037f6 <UART_Transmit_IT>
    return;
 8003680:	e014      	b.n	80036ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00e      	beq.n	80036ac <HAL_UART_IRQHandler+0x514>
 800368e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f8fb 	bl	8003896 <UART_EndTransmit_IT>
    return;
 80036a0:	e004      	b.n	80036ac <HAL_UART_IRQHandler+0x514>
    return;
 80036a2:	bf00      	nop
 80036a4:	e002      	b.n	80036ac <HAL_UART_IRQHandler+0x514>
      return;
 80036a6:	bf00      	nop
 80036a8:	e000      	b.n	80036ac <HAL_UART_IRQHandler+0x514>
      return;
 80036aa:	bf00      	nop
  }
}
 80036ac:	37e8      	adds	r7, #232	; 0xe8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop

080036b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b095      	sub	sp, #84	; 0x54
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371a:	e853 3f00 	ldrex	r3, [r3]
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	330c      	adds	r3, #12
 800372e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003730:	643a      	str	r2, [r7, #64]	; 0x40
 8003732:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003736:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e5      	bne.n	8003710 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3314      	adds	r3, #20
 800374a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	61fb      	str	r3, [r7, #28]
   return(result);
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	64bb      	str	r3, [r7, #72]	; 0x48
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3314      	adds	r3, #20
 8003762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003764:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800376a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800376c:	e841 2300 	strex	r3, r2, [r1]
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1e5      	bne.n	8003744 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	2b01      	cmp	r3, #1
 800377e:	d119      	bne.n	80037b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	330c      	adds	r3, #12
 8003786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f023 0310 	bic.w	r3, r3, #16
 8003796:	647b      	str	r3, [r7, #68]	; 0x44
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	330c      	adds	r3, #12
 800379e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037a0:	61ba      	str	r2, [r7, #24]
 80037a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	6979      	ldr	r1, [r7, #20]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	e841 2300 	strex	r3, r2, [r1]
 80037ac:	613b      	str	r3, [r7, #16]
   return(result);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e5      	bne.n	8003780 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037c2:	bf00      	nop
 80037c4:	3754      	adds	r7, #84	; 0x54
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f7ff ff77 	bl	80036dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b21      	cmp	r3, #33	; 0x21
 8003808:	d13e      	bne.n	8003888 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003812:	d114      	bne.n	800383e <UART_Transmit_IT+0x48>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d110      	bne.n	800383e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003830:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	1c9a      	adds	r2, r3, #2
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	621a      	str	r2, [r3, #32]
 800383c:	e008      	b.n	8003850 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	1c59      	adds	r1, r3, #1
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6211      	str	r1, [r2, #32]
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29b      	uxth	r3, r3
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	4619      	mov	r1, r3
 800385e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10f      	bne.n	8003884 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003872:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003882:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	e000      	b.n	800388a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
  }
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff fefc 	bl	80036b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b08c      	sub	sp, #48	; 0x30
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b22      	cmp	r3, #34	; 0x22
 80038d8:	f040 80ab 	bne.w	8003a32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e4:	d117      	bne.n	8003916 <UART_Receive_IT+0x50>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d113      	bne.n	8003916 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003904:	b29a      	uxth	r2, r3
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	1c9a      	adds	r2, r3, #2
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	629a      	str	r2, [r3, #40]	; 0x28
 8003914:	e026      	b.n	8003964 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800391c:	2300      	movs	r3, #0
 800391e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003928:	d007      	beq.n	800393a <UART_Receive_IT+0x74>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <UART_Receive_IT+0x82>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	b2da      	uxtb	r2, r3
 8003942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	e008      	b.n	800395a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003954:	b2da      	uxtb	r2, r3
 8003956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003958:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29b      	uxth	r3, r3
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	4619      	mov	r1, r3
 8003972:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003974:	2b00      	cmp	r3, #0
 8003976:	d15a      	bne.n	8003a2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0220 	bic.w	r2, r2, #32
 8003986:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003996:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d135      	bne.n	8003a24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	330c      	adds	r3, #12
 80039c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	613b      	str	r3, [r7, #16]
   return(result);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f023 0310 	bic.w	r3, r3, #16
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	330c      	adds	r3, #12
 80039dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039de:	623a      	str	r2, [r7, #32]
 80039e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	69f9      	ldr	r1, [r7, #28]
 80039e4:	6a3a      	ldr	r2, [r7, #32]
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e5      	bne.n	80039be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d10a      	bne.n	8003a16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fe67 	bl	80036f0 <HAL_UARTEx_RxEventCallback>
 8003a22:	e002      	b.n	8003a2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fe4f 	bl	80036c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e002      	b.n	8003a34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e000      	b.n	8003a34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
  }
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3730      	adds	r7, #48	; 0x30
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a40:	b09f      	sub	sp, #124	; 0x7c
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a52:	68d9      	ldr	r1, [r3, #12]
 8003a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	ea40 0301 	orr.w	r3, r0, r1
 8003a5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a80:	f021 010c 	bic.w	r1, r1, #12
 8003a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9a:	6999      	ldr	r1, [r3, #24]
 8003a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	ea40 0301 	orr.w	r3, r0, r1
 8003aa4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4bc5      	ldr	r3, [pc, #788]	; (8003dc0 <UART_SetConfig+0x384>)
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d004      	beq.n	8003aba <UART_SetConfig+0x7e>
 8003ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4bc3      	ldr	r3, [pc, #780]	; (8003dc4 <UART_SetConfig+0x388>)
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d103      	bne.n	8003ac2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003aba:	f7fe faff 	bl	80020bc <HAL_RCC_GetPCLK2Freq>
 8003abe:	6778      	str	r0, [r7, #116]	; 0x74
 8003ac0:	e002      	b.n	8003ac8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ac2:	f7fe fae7 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 8003ac6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad0:	f040 80b6 	bne.w	8003c40 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad6:	461c      	mov	r4, r3
 8003ad8:	f04f 0500 	mov.w	r5, #0
 8003adc:	4622      	mov	r2, r4
 8003ade:	462b      	mov	r3, r5
 8003ae0:	1891      	adds	r1, r2, r2
 8003ae2:	6439      	str	r1, [r7, #64]	; 0x40
 8003ae4:	415b      	adcs	r3, r3
 8003ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003aec:	1912      	adds	r2, r2, r4
 8003aee:	eb45 0303 	adc.w	r3, r5, r3
 8003af2:	f04f 0000 	mov.w	r0, #0
 8003af6:	f04f 0100 	mov.w	r1, #0
 8003afa:	00d9      	lsls	r1, r3, #3
 8003afc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b00:	00d0      	lsls	r0, r2, #3
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	1911      	adds	r1, r2, r4
 8003b08:	6639      	str	r1, [r7, #96]	; 0x60
 8003b0a:	416b      	adcs	r3, r5
 8003b0c:	667b      	str	r3, [r7, #100]	; 0x64
 8003b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	1891      	adds	r1, r2, r2
 8003b1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b1c:	415b      	adcs	r3, r3
 8003b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b24:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b28:	f7fc fb52 	bl	80001d0 <__aeabi_uldivmod>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4ba5      	ldr	r3, [pc, #660]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003b32:	fba3 2302 	umull	r2, r3, r3, r2
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	011e      	lsls	r6, r3, #4
 8003b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b3c:	461c      	mov	r4, r3
 8003b3e:	f04f 0500 	mov.w	r5, #0
 8003b42:	4622      	mov	r2, r4
 8003b44:	462b      	mov	r3, r5
 8003b46:	1891      	adds	r1, r2, r2
 8003b48:	6339      	str	r1, [r7, #48]	; 0x30
 8003b4a:	415b      	adcs	r3, r3
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b52:	1912      	adds	r2, r2, r4
 8003b54:	eb45 0303 	adc.w	r3, r5, r3
 8003b58:	f04f 0000 	mov.w	r0, #0
 8003b5c:	f04f 0100 	mov.w	r1, #0
 8003b60:	00d9      	lsls	r1, r3, #3
 8003b62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b66:	00d0      	lsls	r0, r2, #3
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	1911      	adds	r1, r2, r4
 8003b6e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b70:	416b      	adcs	r3, r5
 8003b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	1891      	adds	r1, r2, r2
 8003b80:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b82:	415b      	adcs	r3, r3
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b8e:	f7fc fb1f 	bl	80001d0 <__aeabi_uldivmod>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4b8c      	ldr	r3, [pc, #560]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003b98:	fba3 1302 	umull	r1, r3, r3, r2
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	2164      	movs	r1, #100	; 0x64
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	3332      	adds	r3, #50	; 0x32
 8003baa:	4a87      	ldr	r2, [pc, #540]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bb8:	441e      	add	r6, r3
 8003bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f04f 0100 	mov.w	r1, #0
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	1894      	adds	r4, r2, r2
 8003bc8:	623c      	str	r4, [r7, #32]
 8003bca:	415b      	adcs	r3, r3
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bd2:	1812      	adds	r2, r2, r0
 8003bd4:	eb41 0303 	adc.w	r3, r1, r3
 8003bd8:	f04f 0400 	mov.w	r4, #0
 8003bdc:	f04f 0500 	mov.w	r5, #0
 8003be0:	00dd      	lsls	r5, r3, #3
 8003be2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003be6:	00d4      	lsls	r4, r2, #3
 8003be8:	4622      	mov	r2, r4
 8003bea:	462b      	mov	r3, r5
 8003bec:	1814      	adds	r4, r2, r0
 8003bee:	653c      	str	r4, [r7, #80]	; 0x50
 8003bf0:	414b      	adcs	r3, r1
 8003bf2:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	1891      	adds	r1, r2, r2
 8003c00:	61b9      	str	r1, [r7, #24]
 8003c02:	415b      	adcs	r3, r3
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c0e:	f7fc fadf 	bl	80001d0 <__aeabi_uldivmod>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4b6c      	ldr	r3, [pc, #432]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003c18:	fba3 1302 	umull	r1, r3, r3, r2
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	2164      	movs	r1, #100	; 0x64
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	3332      	adds	r3, #50	; 0x32
 8003c2a:	4a67      	ldr	r2, [pc, #412]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	f003 0207 	and.w	r2, r3, #7
 8003c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4432      	add	r2, r6
 8003c3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c3e:	e0b9      	b.n	8003db4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c42:	461c      	mov	r4, r3
 8003c44:	f04f 0500 	mov.w	r5, #0
 8003c48:	4622      	mov	r2, r4
 8003c4a:	462b      	mov	r3, r5
 8003c4c:	1891      	adds	r1, r2, r2
 8003c4e:	6139      	str	r1, [r7, #16]
 8003c50:	415b      	adcs	r3, r3
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c58:	1912      	adds	r2, r2, r4
 8003c5a:	eb45 0303 	adc.w	r3, r5, r3
 8003c5e:	f04f 0000 	mov.w	r0, #0
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	00d9      	lsls	r1, r3, #3
 8003c68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c6c:	00d0      	lsls	r0, r2, #3
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	eb12 0804 	adds.w	r8, r2, r4
 8003c76:	eb43 0905 	adc.w	r9, r3, r5
 8003c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f04f 0100 	mov.w	r1, #0
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	008b      	lsls	r3, r1, #2
 8003c8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c92:	0082      	lsls	r2, r0, #2
 8003c94:	4640      	mov	r0, r8
 8003c96:	4649      	mov	r1, r9
 8003c98:	f7fc fa9a 	bl	80001d0 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4b49      	ldr	r3, [pc, #292]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	011e      	lsls	r6, r3, #4
 8003caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cac:	4618      	mov	r0, r3
 8003cae:	f04f 0100 	mov.w	r1, #0
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	1894      	adds	r4, r2, r2
 8003cb8:	60bc      	str	r4, [r7, #8]
 8003cba:	415b      	adcs	r3, r3
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cc2:	1812      	adds	r2, r2, r0
 8003cc4:	eb41 0303 	adc.w	r3, r1, r3
 8003cc8:	f04f 0400 	mov.w	r4, #0
 8003ccc:	f04f 0500 	mov.w	r5, #0
 8003cd0:	00dd      	lsls	r5, r3, #3
 8003cd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cd6:	00d4      	lsls	r4, r2, #3
 8003cd8:	4622      	mov	r2, r4
 8003cda:	462b      	mov	r3, r5
 8003cdc:	1814      	adds	r4, r2, r0
 8003cde:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ce0:	414b      	adcs	r3, r1
 8003ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f04f 0100 	mov.w	r1, #0
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	008b      	lsls	r3, r1, #2
 8003cf8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cfc:	0082      	lsls	r2, r0, #2
 8003cfe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003d02:	f7fc fa65 	bl	80001d0 <__aeabi_uldivmod>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	2164      	movs	r1, #100	; 0x64
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	3332      	adds	r3, #50	; 0x32
 8003d1e:	4a2a      	ldr	r2, [pc, #168]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2a:	441e      	add	r6, r3
 8003d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f04f 0100 	mov.w	r1, #0
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	1894      	adds	r4, r2, r2
 8003d3a:	603c      	str	r4, [r7, #0]
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	607b      	str	r3, [r7, #4]
 8003d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d44:	1812      	adds	r2, r2, r0
 8003d46:	eb41 0303 	adc.w	r3, r1, r3
 8003d4a:	f04f 0400 	mov.w	r4, #0
 8003d4e:	f04f 0500 	mov.w	r5, #0
 8003d52:	00dd      	lsls	r5, r3, #3
 8003d54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d58:	00d4      	lsls	r4, r2, #3
 8003d5a:	4622      	mov	r2, r4
 8003d5c:	462b      	mov	r3, r5
 8003d5e:	eb12 0a00 	adds.w	sl, r2, r0
 8003d62:	eb43 0b01 	adc.w	fp, r3, r1
 8003d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f04f 0100 	mov.w	r1, #0
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	008b      	lsls	r3, r1, #2
 8003d7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d7e:	0082      	lsls	r2, r0, #2
 8003d80:	4650      	mov	r0, sl
 8003d82:	4659      	mov	r1, fp
 8003d84:	f7fc fa24 	bl	80001d0 <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2164      	movs	r1, #100	; 0x64
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	3332      	adds	r3, #50	; 0x32
 8003da0:	4a09      	ldr	r2, [pc, #36]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	f003 020f 	and.w	r2, r3, #15
 8003dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4432      	add	r2, r6
 8003db2:	609a      	str	r2, [r3, #8]
}
 8003db4:	bf00      	nop
 8003db6:	377c      	adds	r7, #124	; 0x7c
 8003db8:	46bd      	mov	sp, r7
 8003dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40011000 	.word	0x40011000
 8003dc4:	40011400 	.word	0x40011400
 8003dc8:	51eb851f 	.word	0x51eb851f

08003dcc <__NVIC_SetPriority>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	6039      	str	r1, [r7, #0]
 8003dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	db0a      	blt.n	8003df6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	490c      	ldr	r1, [pc, #48]	; (8003e18 <__NVIC_SetPriority+0x4c>)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	0112      	lsls	r2, r2, #4
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	440b      	add	r3, r1
 8003df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003df4:	e00a      	b.n	8003e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	4908      	ldr	r1, [pc, #32]	; (8003e1c <__NVIC_SetPriority+0x50>)
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	3b04      	subs	r3, #4
 8003e04:	0112      	lsls	r2, r2, #4
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	440b      	add	r3, r1
 8003e0a:	761a      	strb	r2, [r3, #24]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000e100 	.word	0xe000e100
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003e24:	2100      	movs	r1, #0
 8003e26:	f06f 0004 	mvn.w	r0, #4
 8003e2a:	f7ff ffcf 	bl	8003dcc <__NVIC_SetPriority>
#endif
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e3a:	f3ef 8305 	mrs	r3, IPSR
 8003e3e:	603b      	str	r3, [r7, #0]
  return(result);
 8003e40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003e46:	f06f 0305 	mvn.w	r3, #5
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	e00c      	b.n	8003e68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <osKernelInitialize+0x44>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d105      	bne.n	8003e62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e56:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <osKernelInitialize+0x44>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	e002      	b.n	8003e68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003e62:	f04f 33ff 	mov.w	r3, #4294967295
 8003e66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e68:	687b      	ldr	r3, [r7, #4]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	2000002c 	.word	0x2000002c

08003e7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e82:	f3ef 8305 	mrs	r3, IPSR
 8003e86:	603b      	str	r3, [r7, #0]
  return(result);
 8003e88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003e8e:	f06f 0305 	mvn.w	r3, #5
 8003e92:	607b      	str	r3, [r7, #4]
 8003e94:	e010      	b.n	8003eb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e96:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <osKernelStart+0x48>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d109      	bne.n	8003eb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e9e:	f7ff ffbf 	bl	8003e20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <osKernelStart+0x48>)
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ea8:	f001 f866 	bl	8004f78 <vTaskStartScheduler>
      stat = osOK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	607b      	str	r3, [r7, #4]
 8003eb0:	e002      	b.n	8003eb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003eb8:	687b      	ldr	r3, [r7, #4]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	2000002c 	.word	0x2000002c

08003ec8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08e      	sub	sp, #56	; 0x38
 8003ecc:	af04      	add	r7, sp, #16
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ed8:	f3ef 8305 	mrs	r3, IPSR
 8003edc:	617b      	str	r3, [r7, #20]
  return(result);
 8003ede:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d17e      	bne.n	8003fe2 <osThreadNew+0x11a>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d07b      	beq.n	8003fe2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003eee:	2318      	movs	r3, #24
 8003ef0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8003efa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d045      	beq.n	8003f8e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <osThreadNew+0x48>
        name = attr->name;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <osThreadNew+0x6e>
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b38      	cmp	r3, #56	; 0x38
 8003f28:	d805      	bhi.n	8003f36 <osThreadNew+0x6e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <osThreadNew+0x72>
        return (NULL);
 8003f36:	2300      	movs	r3, #0
 8003f38:	e054      	b.n	8003fe4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	089b      	lsrs	r3, r3, #2
 8003f48:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00e      	beq.n	8003f70 <osThreadNew+0xa8>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b5b      	cmp	r3, #91	; 0x5b
 8003f58:	d90a      	bls.n	8003f70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d006      	beq.n	8003f70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <osThreadNew+0xa8>
        mem = 1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	e010      	b.n	8003f92 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10c      	bne.n	8003f92 <osThreadNew+0xca>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d108      	bne.n	8003f92 <osThreadNew+0xca>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d104      	bne.n	8003f92 <osThreadNew+0xca>
          mem = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	e001      	b.n	8003f92 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d110      	bne.n	8003fba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fa0:	9202      	str	r2, [sp, #8]
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	6a3a      	ldr	r2, [r7, #32]
 8003fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 fe0c 	bl	8004bcc <xTaskCreateStatic>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	e013      	b.n	8003fe2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d110      	bne.n	8003fe2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	f107 0310 	add.w	r3, r7, #16
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 fe57 	bl	8004c86 <xTaskCreate>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d001      	beq.n	8003fe2 <osThreadNew+0x11a>
            hTask = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003fe2:	693b      	ldr	r3, [r7, #16]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3728      	adds	r7, #40	; 0x28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ff4:	f3ef 8305 	mrs	r3, IPSR
 8003ff8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <osDelay+0x1c>
    stat = osErrorISR;
 8004000:	f06f 0305 	mvn.w	r3, #5
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e007      	b.n	8004018 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 ff7c 	bl	8004f10 <vTaskDelay>
    }
  }

  return (stat);
 8004018:	68fb      	ldr	r3, [r7, #12]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4a07      	ldr	r2, [pc, #28]	; (8004050 <vApplicationGetIdleTaskMemory+0x2c>)
 8004034:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4a06      	ldr	r2, [pc, #24]	; (8004054 <vApplicationGetIdleTaskMemory+0x30>)
 800403a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2280      	movs	r2, #128	; 0x80
 8004040:	601a      	str	r2, [r3, #0]
}
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	20000030 	.word	0x20000030
 8004054:	2000008c 	.word	0x2000008c

08004058 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4a07      	ldr	r2, [pc, #28]	; (8004084 <vApplicationGetTimerTaskMemory+0x2c>)
 8004068:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4a06      	ldr	r2, [pc, #24]	; (8004088 <vApplicationGetTimerTaskMemory+0x30>)
 800406e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004076:	601a      	str	r2, [r3, #0]
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	2000028c 	.word	0x2000028c
 8004088:	200002e8 	.word	0x200002e8

0800408c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f103 0208 	add.w	r2, r3, #8
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f04f 32ff 	mov.w	r2, #4294967295
 80040a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f103 0208 	add.w	r2, r3, #8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f103 0208 	add.w	r2, r3, #8
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040e6:	b480      	push	{r7}
 80040e8:	b085      	sub	sp, #20
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	601a      	str	r2, [r3, #0]
}
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d103      	bne.n	800414e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	e00c      	b.n	8004168 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3308      	adds	r3, #8
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e002      	b.n	800415c <vListInsert+0x2e>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	429a      	cmp	r2, r3
 8004166:	d2f6      	bcs.n	8004156 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	601a      	str	r2, [r3, #0]
}
 8004194:	bf00      	nop
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6892      	ldr	r2, [r2, #8]
 80041b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6852      	ldr	r2, [r2, #4]
 80041c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d103      	bne.n	80041d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	1e5a      	subs	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800421a:	bf00      	nop
 800421c:	e7fe      	b.n	800421c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800421e:	f002 f851 	bl	80062c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422a:	68f9      	ldr	r1, [r7, #12]
 800422c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800422e:	fb01 f303 	mul.w	r3, r1, r3
 8004232:	441a      	add	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424e:	3b01      	subs	r3, #1
 8004250:	68f9      	ldr	r1, [r7, #12]
 8004252:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004254:	fb01 f303 	mul.w	r3, r1, r3
 8004258:	441a      	add	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	22ff      	movs	r2, #255	; 0xff
 8004262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	22ff      	movs	r2, #255	; 0xff
 800426a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d114      	bne.n	800429e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01a      	beq.n	80042b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3310      	adds	r3, #16
 8004280:	4618      	mov	r0, r3
 8004282:	f001 f903 	bl	800548c <xTaskRemoveFromEventList>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d012      	beq.n	80042b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <xQueueGenericReset+0xcc>)
 800428e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	e009      	b.n	80042b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3310      	adds	r3, #16
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff fef2 	bl	800408c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3324      	adds	r3, #36	; 0x24
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff feed 	bl	800408c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042b2:	f002 f837 	bl	8006324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042b6:	2301      	movs	r3, #1
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	e000ed04 	.word	0xe000ed04

080042c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08e      	sub	sp, #56	; 0x38
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80042ea:	bf00      	nop
 80042ec:	e7fe      	b.n	80042ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <xQueueGenericCreateStatic+0x52>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <xQueueGenericCreateStatic+0x56>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <xQueueGenericCreateStatic+0x58>
 800431a:	2300      	movs	r3, #0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	623b      	str	r3, [r7, #32]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d102      	bne.n	8004342 <xQueueGenericCreateStatic+0x7e>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <xQueueGenericCreateStatic+0x82>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <xQueueGenericCreateStatic+0x84>
 8004346:	2300      	movs	r3, #0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	61fb      	str	r3, [r7, #28]
}
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004362:	2350      	movs	r3, #80	; 0x50
 8004364:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b50      	cmp	r3, #80	; 0x50
 800436a:	d00a      	beq.n	8004382 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	61bb      	str	r3, [r7, #24]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004382:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00d      	beq.n	80043aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800438e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004396:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800439a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	4613      	mov	r3, r2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68b9      	ldr	r1, [r7, #8]
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f805 	bl	80043b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3730      	adds	r7, #48	; 0x30
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d103      	bne.n	80043d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	e002      	b.n	80043d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043e2:	2101      	movs	r1, #1
 80043e4:	69b8      	ldr	r0, [r7, #24]
 80043e6:	f7ff ff05 	bl	80041f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043f2:	bf00      	nop
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08e      	sub	sp, #56	; 0x38
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800440a:	2300      	movs	r3, #0
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <xQueueGenericSend+0x32>
	__asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d103      	bne.n	800443c <xQueueGenericSend+0x40>
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <xQueueGenericSend+0x44>
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <xQueueGenericSend+0x46>
 8004440:	2300      	movs	r3, #0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <xQueueGenericSend+0x60>
	__asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004458:	bf00      	nop
 800445a:	e7fe      	b.n	800445a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d103      	bne.n	800446a <xQueueGenericSend+0x6e>
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <xQueueGenericSend+0x72>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <xQueueGenericSend+0x74>
 800446e:	2300      	movs	r3, #0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <xQueueGenericSend+0x8e>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	623b      	str	r3, [r7, #32]
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800448a:	f001 f9bd 	bl	8005808 <xTaskGetSchedulerState>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d102      	bne.n	800449a <xQueueGenericSend+0x9e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <xQueueGenericSend+0xa2>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <xQueueGenericSend+0xa4>
 800449e:	2300      	movs	r3, #0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <xQueueGenericSend+0xbe>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	61fb      	str	r3, [r7, #28]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044ba:	f001 ff03 	bl	80062c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d302      	bcc.n	80044d0 <xQueueGenericSend+0xd4>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d129      	bne.n	8004524 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	68b9      	ldr	r1, [r7, #8]
 80044d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044d6:	f000 fa0b 	bl	80048f0 <prvCopyDataToQueue>
 80044da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d010      	beq.n	8004506 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	3324      	adds	r3, #36	; 0x24
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 ffcf 	bl	800548c <xTaskRemoveFromEventList>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d013      	beq.n	800451c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044f4:	4b3f      	ldr	r3, [pc, #252]	; (80045f4 <xQueueGenericSend+0x1f8>)
 80044f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	e00a      	b.n	800451c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800450c:	4b39      	ldr	r3, [pc, #228]	; (80045f4 <xQueueGenericSend+0x1f8>)
 800450e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800451c:	f001 ff02 	bl	8006324 <vPortExitCritical>
				return pdPASS;
 8004520:	2301      	movs	r3, #1
 8004522:	e063      	b.n	80045ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800452a:	f001 fefb 	bl	8006324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800452e:	2300      	movs	r3, #0
 8004530:	e05c      	b.n	80045ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004534:	2b00      	cmp	r3, #0
 8004536:	d106      	bne.n	8004546 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004538:	f107 0314 	add.w	r3, r7, #20
 800453c:	4618      	mov	r0, r3
 800453e:	f001 f809 	bl	8005554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004542:	2301      	movs	r3, #1
 8004544:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004546:	f001 feed 	bl	8006324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800454a:	f000 fd7b 	bl	8005044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800454e:	f001 feb9 	bl	80062c4 <vPortEnterCritical>
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004558:	b25b      	sxtb	r3, r3
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d103      	bne.n	8004568 <xQueueGenericSend+0x16c>
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800456e:	b25b      	sxtb	r3, r3
 8004570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004574:	d103      	bne.n	800457e <xQueueGenericSend+0x182>
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800457e:	f001 fed1 	bl	8006324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004582:	1d3a      	adds	r2, r7, #4
 8004584:	f107 0314 	add.w	r3, r7, #20
 8004588:	4611      	mov	r1, r2
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fff8 	bl	8005580 <xTaskCheckForTimeOut>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d124      	bne.n	80045e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004598:	f000 faa2 	bl	8004ae0 <prvIsQueueFull>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d018      	beq.n	80045d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a4:	3310      	adds	r3, #16
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	4611      	mov	r1, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 ff1e 	bl	80053ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045b2:	f000 fa2d 	bl	8004a10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045b6:	f000 fd53 	bl	8005060 <xTaskResumeAll>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f47f af7c 	bne.w	80044ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80045c2:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <xQueueGenericSend+0x1f8>)
 80045c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	e772      	b.n	80044ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045d6:	f000 fa1b 	bl	8004a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045da:	f000 fd41 	bl	8005060 <xTaskResumeAll>
 80045de:	e76c      	b.n	80044ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045e2:	f000 fa15 	bl	8004a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045e6:	f000 fd3b 	bl	8005060 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3738      	adds	r7, #56	; 0x38
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b090      	sub	sp, #64	; 0x40
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800460a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10a      	bne.n	8004626 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d103      	bne.n	8004634 <xQueueGenericSendFromISR+0x3c>
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <xQueueGenericSendFromISR+0x40>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <xQueueGenericSendFromISR+0x42>
 8004638:	2300      	movs	r3, #0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10a      	bne.n	8004654 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004650:	bf00      	nop
 8004652:	e7fe      	b.n	8004652 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d103      	bne.n	8004662 <xQueueGenericSendFromISR+0x6a>
 800465a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <xQueueGenericSendFromISR+0x6e>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <xQueueGenericSendFromISR+0x70>
 8004666:	2300      	movs	r3, #0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	623b      	str	r3, [r7, #32]
}
 800467e:	bf00      	nop
 8004680:	e7fe      	b.n	8004680 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004682:	f001 ff01 	bl	8006488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004686:	f3ef 8211 	mrs	r2, BASEPRI
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	61fa      	str	r2, [r7, #28]
 800469c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800469e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d302      	bcc.n	80046b4 <xQueueGenericSendFromISR+0xbc>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d12f      	bne.n	8004714 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	68b9      	ldr	r1, [r7, #8]
 80046c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80046ca:	f000 f911 	bl	80048f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d6:	d112      	bne.n	80046fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d016      	beq.n	800470e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e2:	3324      	adds	r3, #36	; 0x24
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fed1 	bl	800548c <xTaskRemoveFromEventList>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00e      	beq.n	800470e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	e007      	b.n	800470e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004702:	3301      	adds	r3, #1
 8004704:	b2db      	uxtb	r3, r3
 8004706:	b25a      	sxtb	r2, r3
 8004708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800470e:	2301      	movs	r3, #1
 8004710:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004712:	e001      	b.n	8004718 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004714:	2300      	movs	r3, #0
 8004716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004722:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004726:	4618      	mov	r0, r3
 8004728:	3740      	adds	r7, #64	; 0x40
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08c      	sub	sp, #48	; 0x30
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800473c:	2300      	movs	r3, #0
 800473e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <xQueueReceive+0x30>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	623b      	str	r3, [r7, #32]
}
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d103      	bne.n	800476e <xQueueReceive+0x3e>
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <xQueueReceive+0x42>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <xQueueReceive+0x44>
 8004772:	2300      	movs	r3, #0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10a      	bne.n	800478e <xQueueReceive+0x5e>
	__asm volatile
 8004778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	61fb      	str	r3, [r7, #28]
}
 800478a:	bf00      	nop
 800478c:	e7fe      	b.n	800478c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800478e:	f001 f83b 	bl	8005808 <xTaskGetSchedulerState>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d102      	bne.n	800479e <xQueueReceive+0x6e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <xQueueReceive+0x72>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <xQueueReceive+0x74>
 80047a2:	2300      	movs	r3, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <xQueueReceive+0x8e>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	61bb      	str	r3, [r7, #24]
}
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047be:	f001 fd81 	bl	80062c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d01f      	beq.n	800480e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047d2:	f000 f8f7 	bl	80049c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	1e5a      	subs	r2, r3, #1
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00f      	beq.n	8004806 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	3310      	adds	r3, #16
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fe4e 	bl	800548c <xTaskRemoveFromEventList>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047f6:	4b3d      	ldr	r3, [pc, #244]	; (80048ec <xQueueReceive+0x1bc>)
 80047f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004806:	f001 fd8d 	bl	8006324 <vPortExitCritical>
				return pdPASS;
 800480a:	2301      	movs	r3, #1
 800480c:	e069      	b.n	80048e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d103      	bne.n	800481c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004814:	f001 fd86 	bl	8006324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004818:	2300      	movs	r3, #0
 800481a:	e062      	b.n	80048e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800481c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004822:	f107 0310 	add.w	r3, r7, #16
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fe94 	bl	8005554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800482c:	2301      	movs	r3, #1
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004830:	f001 fd78 	bl	8006324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004834:	f000 fc06 	bl	8005044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004838:	f001 fd44 	bl	80062c4 <vPortEnterCritical>
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004842:	b25b      	sxtb	r3, r3
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	d103      	bne.n	8004852 <xQueueReceive+0x122>
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004858:	b25b      	sxtb	r3, r3
 800485a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485e:	d103      	bne.n	8004868 <xQueueReceive+0x138>
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004868:	f001 fd5c 	bl	8006324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800486c:	1d3a      	adds	r2, r7, #4
 800486e:	f107 0310 	add.w	r3, r7, #16
 8004872:	4611      	mov	r1, r2
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fe83 	bl	8005580 <xTaskCheckForTimeOut>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d123      	bne.n	80048c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004882:	f000 f917 	bl	8004ab4 <prvIsQueueEmpty>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d017      	beq.n	80048bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	3324      	adds	r3, #36	; 0x24
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	4611      	mov	r1, r2
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fda9 	bl	80053ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800489a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800489c:	f000 f8b8 	bl	8004a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048a0:	f000 fbde 	bl	8005060 <xTaskResumeAll>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d189      	bne.n	80047be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80048aa:	4b10      	ldr	r3, [pc, #64]	; (80048ec <xQueueReceive+0x1bc>)
 80048ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	e780      	b.n	80047be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80048bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048be:	f000 f8a7 	bl	8004a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048c2:	f000 fbcd 	bl	8005060 <xTaskResumeAll>
 80048c6:	e77a      	b.n	80047be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80048c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ca:	f000 f8a1 	bl	8004a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048ce:	f000 fbc7 	bl	8005060 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048d4:	f000 f8ee 	bl	8004ab4 <prvIsQueueEmpty>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f43f af6f 	beq.w	80047be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3730      	adds	r7, #48	; 0x30
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	e000ed04 	.word	0xe000ed04

080048f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10d      	bne.n	800492a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d14d      	bne.n	80049b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	4618      	mov	r0, r3
 800491c:	f000 ff92 	bl	8005844 <xTaskPriorityDisinherit>
 8004920:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	609a      	str	r2, [r3, #8]
 8004928:	e043      	b.n	80049b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d119      	bne.n	8004964 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6858      	ldr	r0, [r3, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	461a      	mov	r2, r3
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	f001 fff2 	bl	8006924 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	441a      	add	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	429a      	cmp	r2, r3
 8004958:	d32b      	bcc.n	80049b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	e026      	b.n	80049b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	68d8      	ldr	r0, [r3, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	461a      	mov	r2, r3
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	f001 ffd8 	bl	8006924 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	425b      	negs	r3, r3
 800497e:	441a      	add	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d207      	bcs.n	80049a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	425b      	negs	r3, r3
 800499a:	441a      	add	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d105      	bne.n	80049b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80049ba:	697b      	ldr	r3, [r7, #20]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d018      	beq.n	8004a08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	441a      	add	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d303      	bcc.n	80049f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68d9      	ldr	r1, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	461a      	mov	r2, r3
 8004a02:	6838      	ldr	r0, [r7, #0]
 8004a04:	f001 ff8e 	bl	8006924 <memcpy>
	}
}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a18:	f001 fc54 	bl	80062c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a24:	e011      	b.n	8004a4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d012      	beq.n	8004a54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3324      	adds	r3, #36	; 0x24
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fd2a 	bl	800548c <xTaskRemoveFromEventList>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a3e:	f000 fe01 	bl	8005644 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	dce9      	bgt.n	8004a26 <prvUnlockQueue+0x16>
 8004a52:	e000      	b.n	8004a56 <prvUnlockQueue+0x46>
					break;
 8004a54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	22ff      	movs	r2, #255	; 0xff
 8004a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a5e:	f001 fc61 	bl	8006324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a62:	f001 fc2f 	bl	80062c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a6e:	e011      	b.n	8004a94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d012      	beq.n	8004a9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3310      	adds	r3, #16
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fd05 	bl	800548c <xTaskRemoveFromEventList>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a88:	f000 fddc 	bl	8005644 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a8c:	7bbb      	ldrb	r3, [r7, #14]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	dce9      	bgt.n	8004a70 <prvUnlockQueue+0x60>
 8004a9c:	e000      	b.n	8004aa0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	22ff      	movs	r2, #255	; 0xff
 8004aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004aa8:	f001 fc3c 	bl	8006324 <vPortExitCritical>
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004abc:	f001 fc02 	bl	80062c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	e001      	b.n	8004ad2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ad2:	f001 fc27 	bl	8006324 <vPortExitCritical>

	return xReturn;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ae8:	f001 fbec 	bl	80062c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d102      	bne.n	8004afe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004af8:	2301      	movs	r3, #1
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	e001      	b.n	8004b02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b02:	f001 fc0f 	bl	8006324 <vPortExitCritical>

	return xReturn;
 8004b06:	68fb      	ldr	r3, [r7, #12]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	e014      	b.n	8004b4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b20:	4a0f      	ldr	r2, [pc, #60]	; (8004b60 <vQueueAddToRegistry+0x50>)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10b      	bne.n	8004b44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b2c:	490c      	ldr	r1, [pc, #48]	; (8004b60 <vQueueAddToRegistry+0x50>)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b36:	4a0a      	ldr	r2, [pc, #40]	; (8004b60 <vQueueAddToRegistry+0x50>)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b42:	e006      	b.n	8004b52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3301      	adds	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b07      	cmp	r3, #7
 8004b4e:	d9e7      	bls.n	8004b20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20004ab0 	.word	0x20004ab0

08004b64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b74:	f001 fba6 	bl	80062c4 <vPortEnterCritical>
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b7e:	b25b      	sxtb	r3, r3
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d103      	bne.n	8004b8e <vQueueWaitForMessageRestricted+0x2a>
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b94:	b25b      	sxtb	r3, r3
 8004b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9a:	d103      	bne.n	8004ba4 <vQueueWaitForMessageRestricted+0x40>
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ba4:	f001 fbbe 	bl	8006324 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d106      	bne.n	8004bbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	3324      	adds	r3, #36	; 0x24
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fc3b 	bl	8005434 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004bbe:	6978      	ldr	r0, [r7, #20]
 8004bc0:	f7ff ff26 	bl	8004a10 <prvUnlockQueue>
	}
 8004bc4:	bf00      	nop
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08e      	sub	sp, #56	; 0x38
 8004bd0:	af04      	add	r7, sp, #16
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	623b      	str	r3, [r7, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <xTaskCreateStatic+0x46>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	61fb      	str	r3, [r7, #28]
}
 8004c0e:	bf00      	nop
 8004c10:	e7fe      	b.n	8004c10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c12:	235c      	movs	r3, #92	; 0x5c
 8004c14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b5c      	cmp	r3, #92	; 0x5c
 8004c1a:	d00a      	beq.n	8004c32 <xTaskCreateStatic+0x66>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	61bb      	str	r3, [r7, #24]
}
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01e      	beq.n	8004c78 <xTaskCreateStatic+0xac>
 8004c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01b      	beq.n	8004c78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c52:	2300      	movs	r3, #0
 8004c54:	9303      	str	r3, [sp, #12]
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	9302      	str	r3, [sp, #8]
 8004c5a:	f107 0314 	add.w	r3, r7, #20
 8004c5e:	9301      	str	r3, [sp, #4]
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f850 	bl	8004d10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c72:	f000 f8dd 	bl	8004e30 <prvAddNewTaskToReadyList>
 8004c76:	e001      	b.n	8004c7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c7c:	697b      	ldr	r3, [r7, #20]
	}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3728      	adds	r7, #40	; 0x28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b08c      	sub	sp, #48	; 0x30
 8004c8a:	af04      	add	r7, sp, #16
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	603b      	str	r3, [r7, #0]
 8004c92:	4613      	mov	r3, r2
 8004c94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f001 fc34 	bl	8006508 <pvPortMalloc>
 8004ca0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00e      	beq.n	8004cc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ca8:	205c      	movs	r0, #92	; 0x5c
 8004caa:	f001 fc2d 	bl	8006508 <pvPortMalloc>
 8004cae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
 8004cbc:	e005      	b.n	8004cca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cbe:	6978      	ldr	r0, [r7, #20]
 8004cc0:	f001 fcee 	bl	80066a0 <vPortFree>
 8004cc4:	e001      	b.n	8004cca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d017      	beq.n	8004d00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cd8:	88fa      	ldrh	r2, [r7, #6]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9303      	str	r3, [sp, #12]
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	9302      	str	r3, [sp, #8]
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	9301      	str	r3, [sp, #4]
 8004ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f80e 	bl	8004d10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cf4:	69f8      	ldr	r0, [r7, #28]
 8004cf6:	f000 f89b 	bl	8004e30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	e002      	b.n	8004d06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d00:	f04f 33ff 	mov.w	r3, #4294967295
 8004d04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d06:	69bb      	ldr	r3, [r7, #24]
	}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	461a      	mov	r2, r3
 8004d28:	21a5      	movs	r1, #165	; 0xa5
 8004d2a:	f001 fe09 	bl	8006940 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f023 0307 	bic.w	r3, r3, #7
 8004d46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	617b      	str	r3, [r7, #20]
}
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01f      	beq.n	8004dae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	e012      	b.n	8004d9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	7819      	ldrb	r1, [r3, #0]
 8004d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	3334      	adds	r3, #52	; 0x34
 8004d84:	460a      	mov	r2, r1
 8004d86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d006      	beq.n	8004da2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	3301      	adds	r3, #1
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	2b0f      	cmp	r3, #15
 8004d9e:	d9e9      	bls.n	8004d74 <prvInitialiseNewTask+0x64>
 8004da0:	e000      	b.n	8004da4 <prvInitialiseNewTask+0x94>
			{
				break;
 8004da2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dac:	e003      	b.n	8004db6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	2b37      	cmp	r3, #55	; 0x37
 8004dba:	d901      	bls.n	8004dc0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004dbc:	2337      	movs	r3, #55	; 0x37
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	2200      	movs	r2, #0
 8004dd0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff f978 	bl	80040cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	3318      	adds	r3, #24
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff f973 	bl	80040cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	2200      	movs	r2, #0
 8004e00:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	68f9      	ldr	r1, [r7, #12]
 8004e0e:	69b8      	ldr	r0, [r7, #24]
 8004e10:	f001 f928 	bl	8006064 <pxPortInitialiseStack>
 8004e14:	4602      	mov	r2, r0
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e26:	bf00      	nop
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e38:	f001 fa44 	bl	80062c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e3c:	4b2d      	ldr	r3, [pc, #180]	; (8004ef4 <prvAddNewTaskToReadyList+0xc4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	4a2c      	ldr	r2, [pc, #176]	; (8004ef4 <prvAddNewTaskToReadyList+0xc4>)
 8004e44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e46:	4b2c      	ldr	r3, [pc, #176]	; (8004ef8 <prvAddNewTaskToReadyList+0xc8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d109      	bne.n	8004e62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e4e:	4a2a      	ldr	r2, [pc, #168]	; (8004ef8 <prvAddNewTaskToReadyList+0xc8>)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e54:	4b27      	ldr	r3, [pc, #156]	; (8004ef4 <prvAddNewTaskToReadyList+0xc4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d110      	bne.n	8004e7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e5c:	f000 fc16 	bl	800568c <prvInitialiseTaskLists>
 8004e60:	e00d      	b.n	8004e7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e62:	4b26      	ldr	r3, [pc, #152]	; (8004efc <prvAddNewTaskToReadyList+0xcc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e6a:	4b23      	ldr	r3, [pc, #140]	; (8004ef8 <prvAddNewTaskToReadyList+0xc8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d802      	bhi.n	8004e7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e78:	4a1f      	ldr	r2, [pc, #124]	; (8004ef8 <prvAddNewTaskToReadyList+0xc8>)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e7e:	4b20      	ldr	r3, [pc, #128]	; (8004f00 <prvAddNewTaskToReadyList+0xd0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3301      	adds	r3, #1
 8004e84:	4a1e      	ldr	r2, [pc, #120]	; (8004f00 <prvAddNewTaskToReadyList+0xd0>)
 8004e86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e88:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <prvAddNewTaskToReadyList+0xd0>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e94:	4b1b      	ldr	r3, [pc, #108]	; (8004f04 <prvAddNewTaskToReadyList+0xd4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d903      	bls.n	8004ea4 <prvAddNewTaskToReadyList+0x74>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	4a18      	ldr	r2, [pc, #96]	; (8004f04 <prvAddNewTaskToReadyList+0xd4>)
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <prvAddNewTaskToReadyList+0xd8>)
 8004eb2:	441a      	add	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f7ff f913 	bl	80040e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ec0:	f001 fa30 	bl	8006324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ec4:	4b0d      	ldr	r3, [pc, #52]	; (8004efc <prvAddNewTaskToReadyList+0xcc>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00e      	beq.n	8004eea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <prvAddNewTaskToReadyList+0xc8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d207      	bcs.n	8004eea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004eda:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <prvAddNewTaskToReadyList+0xdc>)
 8004edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000bbc 	.word	0x20000bbc
 8004ef8:	200006e8 	.word	0x200006e8
 8004efc:	20000bc8 	.word	0x20000bc8
 8004f00:	20000bd8 	.word	0x20000bd8
 8004f04:	20000bc4 	.word	0x20000bc4
 8004f08:	200006ec 	.word	0x200006ec
 8004f0c:	e000ed04 	.word	0xe000ed04

08004f10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d017      	beq.n	8004f52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f22:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <vTaskDelay+0x60>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <vTaskDelay+0x30>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	60bb      	str	r3, [r7, #8]
}
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f40:	f000 f880 	bl	8005044 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f44:	2100      	movs	r1, #0
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fcea 	bl	8005920 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f4c:	f000 f888 	bl	8005060 <xTaskResumeAll>
 8004f50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d107      	bne.n	8004f68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f58:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <vTaskDelay+0x64>)
 8004f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f68:	bf00      	nop
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20000be4 	.word	0x20000be4
 8004f74:	e000ed04 	.word	0xe000ed04

08004f78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f86:	463a      	mov	r2, r7
 8004f88:	1d39      	adds	r1, r7, #4
 8004f8a:	f107 0308 	add.w	r3, r7, #8
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff f848 	bl	8004024 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	9202      	str	r2, [sp, #8]
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	460a      	mov	r2, r1
 8004fa6:	4921      	ldr	r1, [pc, #132]	; (800502c <vTaskStartScheduler+0xb4>)
 8004fa8:	4821      	ldr	r0, [pc, #132]	; (8005030 <vTaskStartScheduler+0xb8>)
 8004faa:	f7ff fe0f 	bl	8004bcc <xTaskCreateStatic>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4a20      	ldr	r2, [pc, #128]	; (8005034 <vTaskStartScheduler+0xbc>)
 8004fb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fb4:	4b1f      	ldr	r3, [pc, #124]	; (8005034 <vTaskStartScheduler+0xbc>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	e001      	b.n	8004fc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d102      	bne.n	8004fd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004fcc:	f000 fcfc 	bl	80059c8 <xTimerCreateTimerTask>
 8004fd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d116      	bne.n	8005006 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	613b      	str	r3, [r7, #16]
}
 8004fea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004fec:	4b12      	ldr	r3, [pc, #72]	; (8005038 <vTaskStartScheduler+0xc0>)
 8004fee:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ff4:	4b11      	ldr	r3, [pc, #68]	; (800503c <vTaskStartScheduler+0xc4>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ffa:	4b11      	ldr	r3, [pc, #68]	; (8005040 <vTaskStartScheduler+0xc8>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005000:	f001 f8be 	bl	8006180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005004:	e00e      	b.n	8005024 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500c:	d10a      	bne.n	8005024 <vTaskStartScheduler+0xac>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	60fb      	str	r3, [r7, #12]
}
 8005020:	bf00      	nop
 8005022:	e7fe      	b.n	8005022 <vTaskStartScheduler+0xaa>
}
 8005024:	bf00      	nop
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	08006988 	.word	0x08006988
 8005030:	0800565d 	.word	0x0800565d
 8005034:	20000be0 	.word	0x20000be0
 8005038:	20000bdc 	.word	0x20000bdc
 800503c:	20000bc8 	.word	0x20000bc8
 8005040:	20000bc0 	.word	0x20000bc0

08005044 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005048:	4b04      	ldr	r3, [pc, #16]	; (800505c <vTaskSuspendAll+0x18>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3301      	adds	r3, #1
 800504e:	4a03      	ldr	r2, [pc, #12]	; (800505c <vTaskSuspendAll+0x18>)
 8005050:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005052:	bf00      	nop
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	20000be4 	.word	0x20000be4

08005060 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800506a:	2300      	movs	r3, #0
 800506c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800506e:	4b42      	ldr	r3, [pc, #264]	; (8005178 <xTaskResumeAll+0x118>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10a      	bne.n	800508c <xTaskResumeAll+0x2c>
	__asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	603b      	str	r3, [r7, #0]
}
 8005088:	bf00      	nop
 800508a:	e7fe      	b.n	800508a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800508c:	f001 f91a 	bl	80062c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005090:	4b39      	ldr	r3, [pc, #228]	; (8005178 <xTaskResumeAll+0x118>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3b01      	subs	r3, #1
 8005096:	4a38      	ldr	r2, [pc, #224]	; (8005178 <xTaskResumeAll+0x118>)
 8005098:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800509a:	4b37      	ldr	r3, [pc, #220]	; (8005178 <xTaskResumeAll+0x118>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d162      	bne.n	8005168 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050a2:	4b36      	ldr	r3, [pc, #216]	; (800517c <xTaskResumeAll+0x11c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d05e      	beq.n	8005168 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050aa:	e02f      	b.n	800510c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ac:	4b34      	ldr	r3, [pc, #208]	; (8005180 <xTaskResumeAll+0x120>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3318      	adds	r3, #24
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff f871 	bl	80041a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3304      	adds	r3, #4
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff f86c 	bl	80041a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050cc:	4b2d      	ldr	r3, [pc, #180]	; (8005184 <xTaskResumeAll+0x124>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d903      	bls.n	80050dc <xTaskResumeAll+0x7c>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	4a2a      	ldr	r2, [pc, #168]	; (8005184 <xTaskResumeAll+0x124>)
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4a27      	ldr	r2, [pc, #156]	; (8005188 <xTaskResumeAll+0x128>)
 80050ea:	441a      	add	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3304      	adds	r3, #4
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f7fe fff7 	bl	80040e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fc:	4b23      	ldr	r3, [pc, #140]	; (800518c <xTaskResumeAll+0x12c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005106:	4b22      	ldr	r3, [pc, #136]	; (8005190 <xTaskResumeAll+0x130>)
 8005108:	2201      	movs	r2, #1
 800510a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800510c:	4b1c      	ldr	r3, [pc, #112]	; (8005180 <xTaskResumeAll+0x120>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1cb      	bne.n	80050ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800511a:	f000 fb55 	bl	80057c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800511e:	4b1d      	ldr	r3, [pc, #116]	; (8005194 <xTaskResumeAll+0x134>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d010      	beq.n	800514c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800512a:	f000 f847 	bl	80051bc <xTaskIncrementTick>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005134:	4b16      	ldr	r3, [pc, #88]	; (8005190 <xTaskResumeAll+0x130>)
 8005136:	2201      	movs	r2, #1
 8005138:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3b01      	subs	r3, #1
 800513e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f1      	bne.n	800512a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005146:	4b13      	ldr	r3, [pc, #76]	; (8005194 <xTaskResumeAll+0x134>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800514c:	4b10      	ldr	r3, [pc, #64]	; (8005190 <xTaskResumeAll+0x130>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d009      	beq.n	8005168 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005154:	2301      	movs	r3, #1
 8005156:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005158:	4b0f      	ldr	r3, [pc, #60]	; (8005198 <xTaskResumeAll+0x138>)
 800515a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005168:	f001 f8dc 	bl	8006324 <vPortExitCritical>

	return xAlreadyYielded;
 800516c:	68bb      	ldr	r3, [r7, #8]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000be4 	.word	0x20000be4
 800517c:	20000bbc 	.word	0x20000bbc
 8005180:	20000b7c 	.word	0x20000b7c
 8005184:	20000bc4 	.word	0x20000bc4
 8005188:	200006ec 	.word	0x200006ec
 800518c:	200006e8 	.word	0x200006e8
 8005190:	20000bd0 	.word	0x20000bd0
 8005194:	20000bcc 	.word	0x20000bcc
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <xTaskGetTickCount+0x1c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051a8:	687b      	ldr	r3, [r7, #4]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20000bc0 	.word	0x20000bc0

080051bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051c6:	4b4f      	ldr	r3, [pc, #316]	; (8005304 <xTaskIncrementTick+0x148>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f040 808f 	bne.w	80052ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051d0:	4b4d      	ldr	r3, [pc, #308]	; (8005308 <xTaskIncrementTick+0x14c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3301      	adds	r3, #1
 80051d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051d8:	4a4b      	ldr	r2, [pc, #300]	; (8005308 <xTaskIncrementTick+0x14c>)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d120      	bne.n	8005226 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80051e4:	4b49      	ldr	r3, [pc, #292]	; (800530c <xTaskIncrementTick+0x150>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <xTaskIncrementTick+0x48>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	603b      	str	r3, [r7, #0]
}
 8005200:	bf00      	nop
 8005202:	e7fe      	b.n	8005202 <xTaskIncrementTick+0x46>
 8005204:	4b41      	ldr	r3, [pc, #260]	; (800530c <xTaskIncrementTick+0x150>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	4b41      	ldr	r3, [pc, #260]	; (8005310 <xTaskIncrementTick+0x154>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a3f      	ldr	r2, [pc, #252]	; (800530c <xTaskIncrementTick+0x150>)
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	4a3f      	ldr	r2, [pc, #252]	; (8005310 <xTaskIncrementTick+0x154>)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	4b3e      	ldr	r3, [pc, #248]	; (8005314 <xTaskIncrementTick+0x158>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3301      	adds	r3, #1
 800521e:	4a3d      	ldr	r2, [pc, #244]	; (8005314 <xTaskIncrementTick+0x158>)
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	f000 fad1 	bl	80057c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005226:	4b3c      	ldr	r3, [pc, #240]	; (8005318 <xTaskIncrementTick+0x15c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	429a      	cmp	r2, r3
 800522e:	d349      	bcc.n	80052c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005230:	4b36      	ldr	r3, [pc, #216]	; (800530c <xTaskIncrementTick+0x150>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800523a:	4b37      	ldr	r3, [pc, #220]	; (8005318 <xTaskIncrementTick+0x15c>)
 800523c:	f04f 32ff 	mov.w	r2, #4294967295
 8005240:	601a      	str	r2, [r3, #0]
					break;
 8005242:	e03f      	b.n	80052c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005244:	4b31      	ldr	r3, [pc, #196]	; (800530c <xTaskIncrementTick+0x150>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	429a      	cmp	r2, r3
 800525a:	d203      	bcs.n	8005264 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800525c:	4a2e      	ldr	r2, [pc, #184]	; (8005318 <xTaskIncrementTick+0x15c>)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005262:	e02f      	b.n	80052c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	3304      	adds	r3, #4
 8005268:	4618      	mov	r0, r3
 800526a:	f7fe ff99 	bl	80041a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	3318      	adds	r3, #24
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe ff90 	bl	80041a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005284:	4b25      	ldr	r3, [pc, #148]	; (800531c <xTaskIncrementTick+0x160>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d903      	bls.n	8005294 <xTaskIncrementTick+0xd8>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	4a22      	ldr	r2, [pc, #136]	; (800531c <xTaskIncrementTick+0x160>)
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <xTaskIncrementTick+0x164>)
 80052a2:	441a      	add	r2, r3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4619      	mov	r1, r3
 80052aa:	4610      	mov	r0, r2
 80052ac:	f7fe ff1b 	bl	80040e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b4:	4b1b      	ldr	r3, [pc, #108]	; (8005324 <xTaskIncrementTick+0x168>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d3b8      	bcc.n	8005230 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80052be:	2301      	movs	r3, #1
 80052c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052c2:	e7b5      	b.n	8005230 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052c4:	4b17      	ldr	r3, [pc, #92]	; (8005324 <xTaskIncrementTick+0x168>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ca:	4915      	ldr	r1, [pc, #84]	; (8005320 <xTaskIncrementTick+0x164>)
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d901      	bls.n	80052e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80052dc:	2301      	movs	r3, #1
 80052de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80052e0:	4b11      	ldr	r3, [pc, #68]	; (8005328 <xTaskIncrementTick+0x16c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80052e8:	2301      	movs	r3, #1
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	e004      	b.n	80052f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80052ee:	4b0f      	ldr	r3, [pc, #60]	; (800532c <xTaskIncrementTick+0x170>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3301      	adds	r3, #1
 80052f4:	4a0d      	ldr	r2, [pc, #52]	; (800532c <xTaskIncrementTick+0x170>)
 80052f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80052f8:	697b      	ldr	r3, [r7, #20]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000be4 	.word	0x20000be4
 8005308:	20000bc0 	.word	0x20000bc0
 800530c:	20000b74 	.word	0x20000b74
 8005310:	20000b78 	.word	0x20000b78
 8005314:	20000bd4 	.word	0x20000bd4
 8005318:	20000bdc 	.word	0x20000bdc
 800531c:	20000bc4 	.word	0x20000bc4
 8005320:	200006ec 	.word	0x200006ec
 8005324:	200006e8 	.word	0x200006e8
 8005328:	20000bd0 	.word	0x20000bd0
 800532c:	20000bcc 	.word	0x20000bcc

08005330 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005336:	4b28      	ldr	r3, [pc, #160]	; (80053d8 <vTaskSwitchContext+0xa8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800533e:	4b27      	ldr	r3, [pc, #156]	; (80053dc <vTaskSwitchContext+0xac>)
 8005340:	2201      	movs	r2, #1
 8005342:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005344:	e041      	b.n	80053ca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005346:	4b25      	ldr	r3, [pc, #148]	; (80053dc <vTaskSwitchContext+0xac>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800534c:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <vTaskSwitchContext+0xb0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	e010      	b.n	8005376 <vTaskSwitchContext+0x46>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <vTaskSwitchContext+0x40>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	607b      	str	r3, [r7, #4]
}
 800536c:	bf00      	nop
 800536e:	e7fe      	b.n	800536e <vTaskSwitchContext+0x3e>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3b01      	subs	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	491b      	ldr	r1, [pc, #108]	; (80053e4 <vTaskSwitchContext+0xb4>)
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0e4      	beq.n	8005354 <vTaskSwitchContext+0x24>
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4a13      	ldr	r2, [pc, #76]	; (80053e4 <vTaskSwitchContext+0xb4>)
 8005396:	4413      	add	r3, r2
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	605a      	str	r2, [r3, #4]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	3308      	adds	r3, #8
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d104      	bne.n	80053ba <vTaskSwitchContext+0x8a>
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	605a      	str	r2, [r3, #4]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	4a09      	ldr	r2, [pc, #36]	; (80053e8 <vTaskSwitchContext+0xb8>)
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <vTaskSwitchContext+0xb0>)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6013      	str	r3, [r2, #0]
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20000be4 	.word	0x20000be4
 80053dc:	20000bd0 	.word	0x20000bd0
 80053e0:	20000bc4 	.word	0x20000bc4
 80053e4:	200006ec 	.word	0x200006ec
 80053e8:	200006e8 	.word	0x200006e8

080053ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	60fb      	str	r3, [r7, #12]
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <vTaskPlaceOnEventList+0x44>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3318      	adds	r3, #24
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fe fe87 	bl	800412e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005420:	2101      	movs	r1, #1
 8005422:	6838      	ldr	r0, [r7, #0]
 8005424:	f000 fa7c 	bl	8005920 <prvAddCurrentTaskToDelayedList>
}
 8005428:	bf00      	nop
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	200006e8 	.word	0x200006e8

08005434 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	617b      	str	r3, [r7, #20]
}
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <vTaskPlaceOnEventListRestricted+0x54>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3318      	adds	r3, #24
 8005462:	4619      	mov	r1, r3
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f7fe fe3e 	bl	80040e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005470:	f04f 33ff 	mov.w	r3, #4294967295
 8005474:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	68b8      	ldr	r0, [r7, #8]
 800547a:	f000 fa51 	bl	8005920 <prvAddCurrentTaskToDelayedList>
	}
 800547e:	bf00      	nop
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	200006e8 	.word	0x200006e8

0800548c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	60fb      	str	r3, [r7, #12]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	3318      	adds	r3, #24
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fe fe6f 	bl	80041a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054c2:	4b1e      	ldr	r3, [pc, #120]	; (800553c <xTaskRemoveFromEventList+0xb0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d11d      	bne.n	8005506 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	3304      	adds	r3, #4
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fe fe66 	bl	80041a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d8:	4b19      	ldr	r3, [pc, #100]	; (8005540 <xTaskRemoveFromEventList+0xb4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d903      	bls.n	80054e8 <xTaskRemoveFromEventList+0x5c>
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	4a16      	ldr	r2, [pc, #88]	; (8005540 <xTaskRemoveFromEventList+0xb4>)
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4a13      	ldr	r2, [pc, #76]	; (8005544 <xTaskRemoveFromEventList+0xb8>)
 80054f6:	441a      	add	r2, r3
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	3304      	adds	r3, #4
 80054fc:	4619      	mov	r1, r3
 80054fe:	4610      	mov	r0, r2
 8005500:	f7fe fdf1 	bl	80040e6 <vListInsertEnd>
 8005504:	e005      	b.n	8005512 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	3318      	adds	r3, #24
 800550a:	4619      	mov	r1, r3
 800550c:	480e      	ldr	r0, [pc, #56]	; (8005548 <xTaskRemoveFromEventList+0xbc>)
 800550e:	f7fe fdea 	bl	80040e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005516:	4b0d      	ldr	r3, [pc, #52]	; (800554c <xTaskRemoveFromEventList+0xc0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	429a      	cmp	r2, r3
 800551e:	d905      	bls.n	800552c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005520:	2301      	movs	r3, #1
 8005522:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005524:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <xTaskRemoveFromEventList+0xc4>)
 8005526:	2201      	movs	r2, #1
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	e001      	b.n	8005530 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800552c:	2300      	movs	r3, #0
 800552e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005530:	697b      	ldr	r3, [r7, #20]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20000be4 	.word	0x20000be4
 8005540:	20000bc4 	.word	0x20000bc4
 8005544:	200006ec 	.word	0x200006ec
 8005548:	20000b7c 	.word	0x20000b7c
 800554c:	200006e8 	.word	0x200006e8
 8005550:	20000bd0 	.word	0x20000bd0

08005554 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800555c:	4b06      	ldr	r3, [pc, #24]	; (8005578 <vTaskInternalSetTimeOutState+0x24>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005564:	4b05      	ldr	r3, [pc, #20]	; (800557c <vTaskInternalSetTimeOutState+0x28>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	605a      	str	r2, [r3, #4]
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	20000bd4 	.word	0x20000bd4
 800557c:	20000bc0 	.word	0x20000bc0

08005580 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	613b      	str	r3, [r7, #16]
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	60fb      	str	r3, [r7, #12]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80055c2:	f000 fe7f 	bl	80062c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055c6:	4b1d      	ldr	r3, [pc, #116]	; (800563c <xTaskCheckForTimeOut+0xbc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d102      	bne.n	80055e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	e023      	b.n	800562e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4b15      	ldr	r3, [pc, #84]	; (8005640 <xTaskCheckForTimeOut+0xc0>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d007      	beq.n	8005602 <xTaskCheckForTimeOut+0x82>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d302      	bcc.n	8005602 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055fc:	2301      	movs	r3, #1
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	e015      	b.n	800562e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	429a      	cmp	r2, r3
 800560a:	d20b      	bcs.n	8005624 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	1ad2      	subs	r2, r2, r3
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff ff9b 	bl	8005554 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800561e:	2300      	movs	r3, #0
 8005620:	61fb      	str	r3, [r7, #28]
 8005622:	e004      	b.n	800562e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800562a:	2301      	movs	r3, #1
 800562c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800562e:	f000 fe79 	bl	8006324 <vPortExitCritical>

	return xReturn;
 8005632:	69fb      	ldr	r3, [r7, #28]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3720      	adds	r7, #32
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20000bc0 	.word	0x20000bc0
 8005640:	20000bd4 	.word	0x20000bd4

08005644 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <vTaskMissedYield+0x14>)
 800564a:	2201      	movs	r2, #1
 800564c:	601a      	str	r2, [r3, #0]
}
 800564e:	bf00      	nop
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	20000bd0 	.word	0x20000bd0

0800565c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005664:	f000 f852 	bl	800570c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005668:	4b06      	ldr	r3, [pc, #24]	; (8005684 <prvIdleTask+0x28>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d9f9      	bls.n	8005664 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005670:	4b05      	ldr	r3, [pc, #20]	; (8005688 <prvIdleTask+0x2c>)
 8005672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005680:	e7f0      	b.n	8005664 <prvIdleTask+0x8>
 8005682:	bf00      	nop
 8005684:	200006ec 	.word	0x200006ec
 8005688:	e000ed04 	.word	0xe000ed04

0800568c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005692:	2300      	movs	r3, #0
 8005694:	607b      	str	r3, [r7, #4]
 8005696:	e00c      	b.n	80056b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4a12      	ldr	r2, [pc, #72]	; (80056ec <prvInitialiseTaskLists+0x60>)
 80056a4:	4413      	add	r3, r2
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe fcf0 	bl	800408c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3301      	adds	r3, #1
 80056b0:	607b      	str	r3, [r7, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b37      	cmp	r3, #55	; 0x37
 80056b6:	d9ef      	bls.n	8005698 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056b8:	480d      	ldr	r0, [pc, #52]	; (80056f0 <prvInitialiseTaskLists+0x64>)
 80056ba:	f7fe fce7 	bl	800408c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056be:	480d      	ldr	r0, [pc, #52]	; (80056f4 <prvInitialiseTaskLists+0x68>)
 80056c0:	f7fe fce4 	bl	800408c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056c4:	480c      	ldr	r0, [pc, #48]	; (80056f8 <prvInitialiseTaskLists+0x6c>)
 80056c6:	f7fe fce1 	bl	800408c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056ca:	480c      	ldr	r0, [pc, #48]	; (80056fc <prvInitialiseTaskLists+0x70>)
 80056cc:	f7fe fcde 	bl	800408c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056d0:	480b      	ldr	r0, [pc, #44]	; (8005700 <prvInitialiseTaskLists+0x74>)
 80056d2:	f7fe fcdb 	bl	800408c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <prvInitialiseTaskLists+0x78>)
 80056d8:	4a05      	ldr	r2, [pc, #20]	; (80056f0 <prvInitialiseTaskLists+0x64>)
 80056da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056dc:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <prvInitialiseTaskLists+0x7c>)
 80056de:	4a05      	ldr	r2, [pc, #20]	; (80056f4 <prvInitialiseTaskLists+0x68>)
 80056e0:	601a      	str	r2, [r3, #0]
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	200006ec 	.word	0x200006ec
 80056f0:	20000b4c 	.word	0x20000b4c
 80056f4:	20000b60 	.word	0x20000b60
 80056f8:	20000b7c 	.word	0x20000b7c
 80056fc:	20000b90 	.word	0x20000b90
 8005700:	20000ba8 	.word	0x20000ba8
 8005704:	20000b74 	.word	0x20000b74
 8005708:	20000b78 	.word	0x20000b78

0800570c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005712:	e019      	b.n	8005748 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005714:	f000 fdd6 	bl	80062c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005718:	4b10      	ldr	r3, [pc, #64]	; (800575c <prvCheckTasksWaitingTermination+0x50>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3304      	adds	r3, #4
 8005724:	4618      	mov	r0, r3
 8005726:	f7fe fd3b 	bl	80041a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800572a:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <prvCheckTasksWaitingTermination+0x54>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3b01      	subs	r3, #1
 8005730:	4a0b      	ldr	r2, [pc, #44]	; (8005760 <prvCheckTasksWaitingTermination+0x54>)
 8005732:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005734:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <prvCheckTasksWaitingTermination+0x58>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3b01      	subs	r3, #1
 800573a:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <prvCheckTasksWaitingTermination+0x58>)
 800573c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800573e:	f000 fdf1 	bl	8006324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f810 	bl	8005768 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005748:	4b06      	ldr	r3, [pc, #24]	; (8005764 <prvCheckTasksWaitingTermination+0x58>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e1      	bne.n	8005714 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000b90 	.word	0x20000b90
 8005760:	20000bbc 	.word	0x20000bbc
 8005764:	20000ba4 	.word	0x20000ba4

08005768 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005776:	2b00      	cmp	r3, #0
 8005778:	d108      	bne.n	800578c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	4618      	mov	r0, r3
 8005780:	f000 ff8e 	bl	80066a0 <vPortFree>
				vPortFree( pxTCB );
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 ff8b 	bl	80066a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800578a:	e018      	b.n	80057be <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005792:	2b01      	cmp	r3, #1
 8005794:	d103      	bne.n	800579e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 ff82 	bl	80066a0 <vPortFree>
	}
 800579c:	e00f      	b.n	80057be <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d00a      	beq.n	80057be <prvDeleteTCB+0x56>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	60fb      	str	r3, [r7, #12]
}
 80057ba:	bf00      	nop
 80057bc:	e7fe      	b.n	80057bc <prvDeleteTCB+0x54>
	}
 80057be:	bf00      	nop
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ce:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <prvResetNextTaskUnblockTime+0x38>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057d8:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <prvResetNextTaskUnblockTime+0x3c>)
 80057da:	f04f 32ff 	mov.w	r2, #4294967295
 80057de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057e0:	e008      	b.n	80057f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057e2:	4b07      	ldr	r3, [pc, #28]	; (8005800 <prvResetNextTaskUnblockTime+0x38>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	4a04      	ldr	r2, [pc, #16]	; (8005804 <prvResetNextTaskUnblockTime+0x3c>)
 80057f2:	6013      	str	r3, [r2, #0]
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	20000b74 	.word	0x20000b74
 8005804:	20000bdc 	.word	0x20000bdc

08005808 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800580e:	4b0b      	ldr	r3, [pc, #44]	; (800583c <xTaskGetSchedulerState+0x34>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d102      	bne.n	800581c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005816:	2301      	movs	r3, #1
 8005818:	607b      	str	r3, [r7, #4]
 800581a:	e008      	b.n	800582e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800581c:	4b08      	ldr	r3, [pc, #32]	; (8005840 <xTaskGetSchedulerState+0x38>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d102      	bne.n	800582a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005824:	2302      	movs	r3, #2
 8005826:	607b      	str	r3, [r7, #4]
 8005828:	e001      	b.n	800582e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800582a:	2300      	movs	r3, #0
 800582c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800582e:	687b      	ldr	r3, [r7, #4]
	}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	20000bc8 	.word	0x20000bc8
 8005840:	20000be4 	.word	0x20000be4

08005844 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005850:	2300      	movs	r3, #0
 8005852:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d056      	beq.n	8005908 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800585a:	4b2e      	ldr	r3, [pc, #184]	; (8005914 <xTaskPriorityDisinherit+0xd0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	429a      	cmp	r2, r3
 8005862:	d00a      	beq.n	800587a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	60fb      	str	r3, [r7, #12]
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10a      	bne.n	8005898 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	60bb      	str	r3, [r7, #8]
}
 8005894:	bf00      	nop
 8005896:	e7fe      	b.n	8005896 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589c:	1e5a      	subs	r2, r3, #1
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d02c      	beq.n	8005908 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d128      	bne.n	8005908 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	3304      	adds	r3, #4
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe fc70 	bl	80041a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d8:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <xTaskPriorityDisinherit+0xd4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d903      	bls.n	80058e8 <xTaskPriorityDisinherit+0xa4>
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	4a0c      	ldr	r2, [pc, #48]	; (8005918 <xTaskPriorityDisinherit+0xd4>)
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4a09      	ldr	r2, [pc, #36]	; (800591c <xTaskPriorityDisinherit+0xd8>)
 80058f6:	441a      	add	r2, r3
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f7fe fbf1 	bl	80040e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005904:	2301      	movs	r3, #1
 8005906:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005908:	697b      	ldr	r3, [r7, #20]
	}
 800590a:	4618      	mov	r0, r3
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	200006e8 	.word	0x200006e8
 8005918:	20000bc4 	.word	0x20000bc4
 800591c:	200006ec 	.word	0x200006ec

08005920 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800592a:	4b21      	ldr	r3, [pc, #132]	; (80059b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005930:	4b20      	ldr	r3, [pc, #128]	; (80059b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3304      	adds	r3, #4
 8005936:	4618      	mov	r0, r3
 8005938:	f7fe fc32 	bl	80041a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005942:	d10a      	bne.n	800595a <prvAddCurrentTaskToDelayedList+0x3a>
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d007      	beq.n	800595a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800594a:	4b1a      	ldr	r3, [pc, #104]	; (80059b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3304      	adds	r3, #4
 8005950:	4619      	mov	r1, r3
 8005952:	4819      	ldr	r0, [pc, #100]	; (80059b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005954:	f7fe fbc7 	bl	80040e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005958:	e026      	b.n	80059a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4413      	add	r3, r2
 8005960:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005962:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	429a      	cmp	r2, r3
 8005970:	d209      	bcs.n	8005986 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005972:	4b12      	ldr	r3, [pc, #72]	; (80059bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3304      	adds	r3, #4
 800597c:	4619      	mov	r1, r3
 800597e:	4610      	mov	r0, r2
 8005980:	f7fe fbd5 	bl	800412e <vListInsert>
}
 8005984:	e010      	b.n	80059a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005986:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f7fe fbcb 	bl	800412e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005998:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d202      	bcs.n	80059a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80059a2:	4a08      	ldr	r2, [pc, #32]	; (80059c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	6013      	str	r3, [r2, #0]
}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20000bc0 	.word	0x20000bc0
 80059b4:	200006e8 	.word	0x200006e8
 80059b8:	20000ba8 	.word	0x20000ba8
 80059bc:	20000b78 	.word	0x20000b78
 80059c0:	20000b74 	.word	0x20000b74
 80059c4:	20000bdc 	.word	0x20000bdc

080059c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08a      	sub	sp, #40	; 0x28
 80059cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80059d2:	f000 fb07 	bl	8005fe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80059d6:	4b1c      	ldr	r3, [pc, #112]	; (8005a48 <xTimerCreateTimerTask+0x80>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d021      	beq.n	8005a22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80059e6:	1d3a      	adds	r2, r7, #4
 80059e8:	f107 0108 	add.w	r1, r7, #8
 80059ec:	f107 030c 	add.w	r3, r7, #12
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fe fb31 	bl	8004058 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	9202      	str	r2, [sp, #8]
 80059fe:	9301      	str	r3, [sp, #4]
 8005a00:	2302      	movs	r3, #2
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	2300      	movs	r3, #0
 8005a06:	460a      	mov	r2, r1
 8005a08:	4910      	ldr	r1, [pc, #64]	; (8005a4c <xTimerCreateTimerTask+0x84>)
 8005a0a:	4811      	ldr	r0, [pc, #68]	; (8005a50 <xTimerCreateTimerTask+0x88>)
 8005a0c:	f7ff f8de 	bl	8004bcc <xTaskCreateStatic>
 8005a10:	4603      	mov	r3, r0
 8005a12:	4a10      	ldr	r2, [pc, #64]	; (8005a54 <xTimerCreateTimerTask+0x8c>)
 8005a14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a16:	4b0f      	ldr	r3, [pc, #60]	; (8005a54 <xTimerCreateTimerTask+0x8c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10a      	bne.n	8005a3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	613b      	str	r3, [r7, #16]
}
 8005a3a:	bf00      	nop
 8005a3c:	e7fe      	b.n	8005a3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a3e:	697b      	ldr	r3, [r7, #20]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	20000c18 	.word	0x20000c18
 8005a4c:	08006990 	.word	0x08006990
 8005a50:	08005b8d 	.word	0x08005b8d
 8005a54:	20000c1c 	.word	0x20000c1c

08005a58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08a      	sub	sp, #40	; 0x28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10a      	bne.n	8005a86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	623b      	str	r3, [r7, #32]
}
 8005a82:	bf00      	nop
 8005a84:	e7fe      	b.n	8005a84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a86:	4b1a      	ldr	r3, [pc, #104]	; (8005af0 <xTimerGenericCommand+0x98>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d02a      	beq.n	8005ae4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b05      	cmp	r3, #5
 8005a9e:	dc18      	bgt.n	8005ad2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005aa0:	f7ff feb2 	bl	8005808 <xTaskGetSchedulerState>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d109      	bne.n	8005abe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005aaa:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <xTimerGenericCommand+0x98>)
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	f107 0110 	add.w	r1, r7, #16
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab6:	f7fe fca1 	bl	80043fc <xQueueGenericSend>
 8005aba:	6278      	str	r0, [r7, #36]	; 0x24
 8005abc:	e012      	b.n	8005ae4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005abe:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <xTimerGenericCommand+0x98>)
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	f107 0110 	add.w	r1, r7, #16
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f7fe fc97 	bl	80043fc <xQueueGenericSend>
 8005ace:	6278      	str	r0, [r7, #36]	; 0x24
 8005ad0:	e008      	b.n	8005ae4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ad2:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <xTimerGenericCommand+0x98>)
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	f107 0110 	add.w	r1, r7, #16
 8005ada:	2300      	movs	r3, #0
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	f7fe fd8b 	bl	80045f8 <xQueueGenericSendFromISR>
 8005ae2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3728      	adds	r7, #40	; 0x28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000c18 	.word	0x20000c18

08005af4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b088      	sub	sp, #32
 8005af8:	af02      	add	r7, sp, #8
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005afe:	4b22      	ldr	r3, [pc, #136]	; (8005b88 <prvProcessExpiredTimer+0x94>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fe fb47 	bl	80041a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d022      	beq.n	8005b66 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	699a      	ldr	r2, [r3, #24]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	18d1      	adds	r1, r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	6978      	ldr	r0, [r7, #20]
 8005b2e:	f000 f8d1 	bl	8005cd4 <prvInsertTimerInActiveList>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01f      	beq.n	8005b78 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b38:	2300      	movs	r3, #0
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	2100      	movs	r1, #0
 8005b42:	6978      	ldr	r0, [r7, #20]
 8005b44:	f7ff ff88 	bl	8005a58 <xTimerGenericCommand>
 8005b48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d113      	bne.n	8005b78 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	60fb      	str	r3, [r7, #12]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b6c:	f023 0301 	bic.w	r3, r3, #1
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	6978      	ldr	r0, [r7, #20]
 8005b7e:	4798      	blx	r3
}
 8005b80:	bf00      	nop
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20000c10 	.word	0x20000c10

08005b8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b94:	f107 0308 	add.w	r3, r7, #8
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 f857 	bl	8005c4c <prvGetNextExpireTime>
 8005b9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f803 	bl	8005bb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005baa:	f000 f8d5 	bl	8005d58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bae:	e7f1      	b.n	8005b94 <prvTimerTask+0x8>

08005bb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005bba:	f7ff fa43 	bl	8005044 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bbe:	f107 0308 	add.w	r3, r7, #8
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 f866 	bl	8005c94 <prvSampleTimeNow>
 8005bc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d130      	bne.n	8005c32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10a      	bne.n	8005bec <prvProcessTimerOrBlockTask+0x3c>
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d806      	bhi.n	8005bec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005bde:	f7ff fa3f 	bl	8005060 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005be2:	68f9      	ldr	r1, [r7, #12]
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7ff ff85 	bl	8005af4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005bea:	e024      	b.n	8005c36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d008      	beq.n	8005c04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005bf2:	4b13      	ldr	r3, [pc, #76]	; (8005c40 <prvProcessTimerOrBlockTask+0x90>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <prvProcessTimerOrBlockTask+0x50>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e000      	b.n	8005c02 <prvProcessTimerOrBlockTask+0x52>
 8005c00:	2300      	movs	r3, #0
 8005c02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c04:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <prvProcessTimerOrBlockTask+0x94>)
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	4619      	mov	r1, r3
 8005c12:	f7fe ffa7 	bl	8004b64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c16:	f7ff fa23 	bl	8005060 <xTaskResumeAll>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c20:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <prvProcessTimerOrBlockTask+0x98>)
 8005c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	f3bf 8f6f 	isb	sy
}
 8005c30:	e001      	b.n	8005c36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c32:	f7ff fa15 	bl	8005060 <xTaskResumeAll>
}
 8005c36:	bf00      	nop
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000c14 	.word	0x20000c14
 8005c44:	20000c18 	.word	0x20000c18
 8005c48:	e000ed04 	.word	0xe000ed04

08005c4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c54:	4b0e      	ldr	r3, [pc, #56]	; (8005c90 <prvGetNextExpireTime+0x44>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <prvGetNextExpireTime+0x16>
 8005c5e:	2201      	movs	r2, #1
 8005c60:	e000      	b.n	8005c64 <prvGetNextExpireTime+0x18>
 8005c62:	2200      	movs	r2, #0
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d105      	bne.n	8005c7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c70:	4b07      	ldr	r3, [pc, #28]	; (8005c90 <prvGetNextExpireTime+0x44>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	e001      	b.n	8005c80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c80:	68fb      	ldr	r3, [r7, #12]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	20000c10 	.word	0x20000c10

08005c94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c9c:	f7ff fa7e 	bl	800519c <xTaskGetTickCount>
 8005ca0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ca2:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <prvSampleTimeNow+0x3c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d205      	bcs.n	8005cb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005cac:	f000 f936 	bl	8005f1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	e002      	b.n	8005cbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005cbe:	4a04      	ldr	r2, [pc, #16]	; (8005cd0 <prvSampleTimeNow+0x3c>)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000c20 	.word	0x20000c20

08005cd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d812      	bhi.n	8005d20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d302      	bcc.n	8005d0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	e01b      	b.n	8005d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d0e:	4b10      	ldr	r3, [pc, #64]	; (8005d50 <prvInsertTimerInActiveList+0x7c>)
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3304      	adds	r3, #4
 8005d16:	4619      	mov	r1, r3
 8005d18:	4610      	mov	r0, r2
 8005d1a:	f7fe fa08 	bl	800412e <vListInsert>
 8005d1e:	e012      	b.n	8005d46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d206      	bcs.n	8005d36 <prvInsertTimerInActiveList+0x62>
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d302      	bcc.n	8005d36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d30:	2301      	movs	r3, #1
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	e007      	b.n	8005d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d36:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <prvInsertTimerInActiveList+0x80>)
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4610      	mov	r0, r2
 8005d42:	f7fe f9f4 	bl	800412e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d46:	697b      	ldr	r3, [r7, #20]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3718      	adds	r7, #24
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20000c14 	.word	0x20000c14
 8005d54:	20000c10 	.word	0x20000c10

08005d58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08e      	sub	sp, #56	; 0x38
 8005d5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d5e:	e0ca      	b.n	8005ef6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	da18      	bge.n	8005d98 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d66:	1d3b      	adds	r3, r7, #4
 8005d68:	3304      	adds	r3, #4
 8005d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	61fb      	str	r3, [r7, #28]
}
 8005d84:	bf00      	nop
 8005d86:	e7fe      	b.n	8005d86 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d8e:	6850      	ldr	r0, [r2, #4]
 8005d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d92:	6892      	ldr	r2, [r2, #8]
 8005d94:	4611      	mov	r1, r2
 8005d96:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f2c0 80aa 	blt.w	8005ef4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	3304      	adds	r3, #4
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fe f9f5 	bl	80041a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005db6:	463b      	mov	r3, r7
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff ff6b 	bl	8005c94 <prvSampleTimeNow>
 8005dbe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b09      	cmp	r3, #9
 8005dc4:	f200 8097 	bhi.w	8005ef6 <prvProcessReceivedCommands+0x19e>
 8005dc8:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <prvProcessReceivedCommands+0x78>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005df9 	.word	0x08005df9
 8005dd4:	08005df9 	.word	0x08005df9
 8005dd8:	08005df9 	.word	0x08005df9
 8005ddc:	08005e6d 	.word	0x08005e6d
 8005de0:	08005e81 	.word	0x08005e81
 8005de4:	08005ecb 	.word	0x08005ecb
 8005de8:	08005df9 	.word	0x08005df9
 8005dec:	08005df9 	.word	0x08005df9
 8005df0:	08005e6d 	.word	0x08005e6d
 8005df4:	08005e81 	.word	0x08005e81
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dfe:	f043 0301 	orr.w	r3, r3, #1
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	18d1      	adds	r1, r2, r3
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e18:	f7ff ff5c 	bl	8005cd4 <prvInsertTimerInActiveList>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d069      	beq.n	8005ef6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d05e      	beq.n	8005ef6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	441a      	add	r2, r3
 8005e40:	2300      	movs	r3, #0
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	2300      	movs	r3, #0
 8005e46:	2100      	movs	r1, #0
 8005e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e4a:	f7ff fe05 	bl	8005a58 <xTimerGenericCommand>
 8005e4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d14f      	bne.n	8005ef6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	61bb      	str	r3, [r7, #24]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e72:	f023 0301 	bic.w	r3, r3, #1
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005e7e:	e03a      	b.n	8005ef6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e86:	f043 0301 	orr.w	r3, r3, #1
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	617b      	str	r3, [r7, #20]
}
 8005eb2:	bf00      	nop
 8005eb4:	e7fe      	b.n	8005eb4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	18d1      	adds	r1, r2, r3
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ec4:	f7ff ff06 	bl	8005cd4 <prvInsertTimerInActiveList>
					break;
 8005ec8:	e015      	b.n	8005ef6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d103      	bne.n	8005ee0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eda:	f000 fbe1 	bl	80066a0 <vPortFree>
 8005ede:	e00a      	b.n	8005ef6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ee6:	f023 0301 	bic.w	r3, r3, #1
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005ef2:	e000      	b.n	8005ef6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005ef4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ef6:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <prvProcessReceivedCommands+0x1c0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	1d39      	adds	r1, r7, #4
 8005efc:	2200      	movs	r2, #0
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe fc16 	bl	8004730 <xQueueReceive>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f47f af2a 	bne.w	8005d60 <prvProcessReceivedCommands+0x8>
	}
}
 8005f0c:	bf00      	nop
 8005f0e:	bf00      	nop
 8005f10:	3730      	adds	r7, #48	; 0x30
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20000c18 	.word	0x20000c18

08005f1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b088      	sub	sp, #32
 8005f20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f22:	e048      	b.n	8005fb6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f24:	4b2d      	ldr	r3, [pc, #180]	; (8005fdc <prvSwitchTimerLists+0xc0>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f2e:	4b2b      	ldr	r3, [pc, #172]	; (8005fdc <prvSwitchTimerLists+0xc0>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fe f92f 	bl	80041a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d02e      	beq.n	8005fb6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4413      	add	r3, r2
 8005f60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d90e      	bls.n	8005f88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f76:	4b19      	ldr	r3, [pc, #100]	; (8005fdc <prvSwitchTimerLists+0xc0>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4610      	mov	r0, r2
 8005f82:	f7fe f8d4 	bl	800412e <vListInsert>
 8005f86:	e016      	b.n	8005fb6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f88:	2300      	movs	r3, #0
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	2100      	movs	r1, #0
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f7ff fd60 	bl	8005a58 <xTimerGenericCommand>
 8005f98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	603b      	str	r3, [r7, #0]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fb6:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <prvSwitchTimerLists+0xc0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1b1      	bne.n	8005f24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005fc0:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <prvSwitchTimerLists+0xc0>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005fc6:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <prvSwitchTimerLists+0xc4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a04      	ldr	r2, [pc, #16]	; (8005fdc <prvSwitchTimerLists+0xc0>)
 8005fcc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005fce:	4a04      	ldr	r2, [pc, #16]	; (8005fe0 <prvSwitchTimerLists+0xc4>)
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	6013      	str	r3, [r2, #0]
}
 8005fd4:	bf00      	nop
 8005fd6:	3718      	adds	r7, #24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	20000c10 	.word	0x20000c10
 8005fe0:	20000c14 	.word	0x20000c14

08005fe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005fea:	f000 f96b 	bl	80062c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005fee:	4b15      	ldr	r3, [pc, #84]	; (8006044 <prvCheckForValidListAndQueue+0x60>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d120      	bne.n	8006038 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ff6:	4814      	ldr	r0, [pc, #80]	; (8006048 <prvCheckForValidListAndQueue+0x64>)
 8005ff8:	f7fe f848 	bl	800408c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ffc:	4813      	ldr	r0, [pc, #76]	; (800604c <prvCheckForValidListAndQueue+0x68>)
 8005ffe:	f7fe f845 	bl	800408c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006002:	4b13      	ldr	r3, [pc, #76]	; (8006050 <prvCheckForValidListAndQueue+0x6c>)
 8006004:	4a10      	ldr	r2, [pc, #64]	; (8006048 <prvCheckForValidListAndQueue+0x64>)
 8006006:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006008:	4b12      	ldr	r3, [pc, #72]	; (8006054 <prvCheckForValidListAndQueue+0x70>)
 800600a:	4a10      	ldr	r2, [pc, #64]	; (800604c <prvCheckForValidListAndQueue+0x68>)
 800600c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800600e:	2300      	movs	r3, #0
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	4b11      	ldr	r3, [pc, #68]	; (8006058 <prvCheckForValidListAndQueue+0x74>)
 8006014:	4a11      	ldr	r2, [pc, #68]	; (800605c <prvCheckForValidListAndQueue+0x78>)
 8006016:	2110      	movs	r1, #16
 8006018:	200a      	movs	r0, #10
 800601a:	f7fe f953 	bl	80042c4 <xQueueGenericCreateStatic>
 800601e:	4603      	mov	r3, r0
 8006020:	4a08      	ldr	r2, [pc, #32]	; (8006044 <prvCheckForValidListAndQueue+0x60>)
 8006022:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006024:	4b07      	ldr	r3, [pc, #28]	; (8006044 <prvCheckForValidListAndQueue+0x60>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800602c:	4b05      	ldr	r3, [pc, #20]	; (8006044 <prvCheckForValidListAndQueue+0x60>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	490b      	ldr	r1, [pc, #44]	; (8006060 <prvCheckForValidListAndQueue+0x7c>)
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe fd6c 	bl	8004b10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006038:	f000 f974 	bl	8006324 <vPortExitCritical>
}
 800603c:	bf00      	nop
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20000c18 	.word	0x20000c18
 8006048:	20000be8 	.word	0x20000be8
 800604c:	20000bfc 	.word	0x20000bfc
 8006050:	20000c10 	.word	0x20000c10
 8006054:	20000c14 	.word	0x20000c14
 8006058:	20000cc4 	.word	0x20000cc4
 800605c:	20000c24 	.word	0x20000c24
 8006060:	08006998 	.word	0x08006998

08006064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3b04      	subs	r3, #4
 8006074:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800607c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3b04      	subs	r3, #4
 8006082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f023 0201 	bic.w	r2, r3, #1
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3b04      	subs	r3, #4
 8006092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006094:	4a0c      	ldr	r2, [pc, #48]	; (80060c8 <pxPortInitialiseStack+0x64>)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3b14      	subs	r3, #20
 800609e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3b04      	subs	r3, #4
 80060aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f06f 0202 	mvn.w	r2, #2
 80060b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3b20      	subs	r3, #32
 80060b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060ba:	68fb      	ldr	r3, [r7, #12]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	080060cd 	.word	0x080060cd

080060cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060d6:	4b12      	ldr	r3, [pc, #72]	; (8006120 <prvTaskExitError+0x54>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060de:	d00a      	beq.n	80060f6 <prvTaskExitError+0x2a>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60fb      	str	r3, [r7, #12]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <prvTaskExitError+0x28>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	60bb      	str	r3, [r7, #8]
}
 8006108:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800610a:	bf00      	nop
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0fc      	beq.n	800610c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006112:	bf00      	nop
 8006114:	bf00      	nop
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	2000000c 	.word	0x2000000c
	...

08006130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006130:	4b07      	ldr	r3, [pc, #28]	; (8006150 <pxCurrentTCBConst2>)
 8006132:	6819      	ldr	r1, [r3, #0]
 8006134:	6808      	ldr	r0, [r1, #0]
 8006136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613a:	f380 8809 	msr	PSP, r0
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f04f 0000 	mov.w	r0, #0
 8006146:	f380 8811 	msr	BASEPRI, r0
 800614a:	4770      	bx	lr
 800614c:	f3af 8000 	nop.w

08006150 <pxCurrentTCBConst2>:
 8006150:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006154:	bf00      	nop
 8006156:	bf00      	nop

08006158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006158:	4808      	ldr	r0, [pc, #32]	; (800617c <prvPortStartFirstTask+0x24>)
 800615a:	6800      	ldr	r0, [r0, #0]
 800615c:	6800      	ldr	r0, [r0, #0]
 800615e:	f380 8808 	msr	MSP, r0
 8006162:	f04f 0000 	mov.w	r0, #0
 8006166:	f380 8814 	msr	CONTROL, r0
 800616a:	b662      	cpsie	i
 800616c:	b661      	cpsie	f
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	df00      	svc	0
 8006178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800617a:	bf00      	nop
 800617c:	e000ed08 	.word	0xe000ed08

08006180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006186:	4b46      	ldr	r3, [pc, #280]	; (80062a0 <xPortStartScheduler+0x120>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a46      	ldr	r2, [pc, #280]	; (80062a4 <xPortStartScheduler+0x124>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d10a      	bne.n	80061a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	613b      	str	r3, [r7, #16]
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061a6:	4b3e      	ldr	r3, [pc, #248]	; (80062a0 <xPortStartScheduler+0x120>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a3f      	ldr	r2, [pc, #252]	; (80062a8 <xPortStartScheduler+0x128>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d10a      	bne.n	80061c6 <xPortStartScheduler+0x46>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	60fb      	str	r3, [r7, #12]
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061c6:	4b39      	ldr	r3, [pc, #228]	; (80062ac <xPortStartScheduler+0x12c>)
 80061c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	22ff      	movs	r2, #255	; 0xff
 80061d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	4b31      	ldr	r3, [pc, #196]	; (80062b0 <xPortStartScheduler+0x130>)
 80061ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061ee:	4b31      	ldr	r3, [pc, #196]	; (80062b4 <xPortStartScheduler+0x134>)
 80061f0:	2207      	movs	r2, #7
 80061f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061f4:	e009      	b.n	800620a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80061f6:	4b2f      	ldr	r3, [pc, #188]	; (80062b4 <xPortStartScheduler+0x134>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	4a2d      	ldr	r2, [pc, #180]	; (80062b4 <xPortStartScheduler+0x134>)
 80061fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	b2db      	uxtb	r3, r3
 8006208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006212:	2b80      	cmp	r3, #128	; 0x80
 8006214:	d0ef      	beq.n	80061f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006216:	4b27      	ldr	r3, [pc, #156]	; (80062b4 <xPortStartScheduler+0x134>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f1c3 0307 	rsb	r3, r3, #7
 800621e:	2b04      	cmp	r3, #4
 8006220:	d00a      	beq.n	8006238 <xPortStartScheduler+0xb8>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	60bb      	str	r3, [r7, #8]
}
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006238:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <xPortStartScheduler+0x134>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	021b      	lsls	r3, r3, #8
 800623e:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <xPortStartScheduler+0x134>)
 8006240:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006242:	4b1c      	ldr	r3, [pc, #112]	; (80062b4 <xPortStartScheduler+0x134>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800624a:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <xPortStartScheduler+0x134>)
 800624c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	b2da      	uxtb	r2, r3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006256:	4b18      	ldr	r3, [pc, #96]	; (80062b8 <xPortStartScheduler+0x138>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a17      	ldr	r2, [pc, #92]	; (80062b8 <xPortStartScheduler+0x138>)
 800625c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006260:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006262:	4b15      	ldr	r3, [pc, #84]	; (80062b8 <xPortStartScheduler+0x138>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a14      	ldr	r2, [pc, #80]	; (80062b8 <xPortStartScheduler+0x138>)
 8006268:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800626c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800626e:	f000 f8dd 	bl	800642c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006272:	4b12      	ldr	r3, [pc, #72]	; (80062bc <xPortStartScheduler+0x13c>)
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006278:	f000 f8fc 	bl	8006474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800627c:	4b10      	ldr	r3, [pc, #64]	; (80062c0 <xPortStartScheduler+0x140>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a0f      	ldr	r2, [pc, #60]	; (80062c0 <xPortStartScheduler+0x140>)
 8006282:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006286:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006288:	f7ff ff66 	bl	8006158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800628c:	f7ff f850 	bl	8005330 <vTaskSwitchContext>
	prvTaskExitError();
 8006290:	f7ff ff1c 	bl	80060cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	e000ed00 	.word	0xe000ed00
 80062a4:	410fc271 	.word	0x410fc271
 80062a8:	410fc270 	.word	0x410fc270
 80062ac:	e000e400 	.word	0xe000e400
 80062b0:	20000d14 	.word	0x20000d14
 80062b4:	20000d18 	.word	0x20000d18
 80062b8:	e000ed20 	.word	0xe000ed20
 80062bc:	2000000c 	.word	0x2000000c
 80062c0:	e000ef34 	.word	0xe000ef34

080062c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	607b      	str	r3, [r7, #4]
}
 80062dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062de:	4b0f      	ldr	r3, [pc, #60]	; (800631c <vPortEnterCritical+0x58>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3301      	adds	r3, #1
 80062e4:	4a0d      	ldr	r2, [pc, #52]	; (800631c <vPortEnterCritical+0x58>)
 80062e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062e8:	4b0c      	ldr	r3, [pc, #48]	; (800631c <vPortEnterCritical+0x58>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d10f      	bne.n	8006310 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062f0:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <vPortEnterCritical+0x5c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <vPortEnterCritical+0x4c>
	__asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	603b      	str	r3, [r7, #0]
}
 800630c:	bf00      	nop
 800630e:	e7fe      	b.n	800630e <vPortEnterCritical+0x4a>
	}
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	2000000c 	.word	0x2000000c
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <vPortExitCritical+0x50>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <vPortExitCritical+0x24>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	607b      	str	r3, [r7, #4]
}
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <vPortExitCritical+0x50>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3b01      	subs	r3, #1
 800634e:	4a09      	ldr	r2, [pc, #36]	; (8006374 <vPortExitCritical+0x50>)
 8006350:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006352:	4b08      	ldr	r3, [pc, #32]	; (8006374 <vPortExitCritical+0x50>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d105      	bne.n	8006366 <vPortExitCritical+0x42>
 800635a:	2300      	movs	r3, #0
 800635c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	f383 8811 	msr	BASEPRI, r3
}
 8006364:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	2000000c 	.word	0x2000000c
	...

08006380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006380:	f3ef 8009 	mrs	r0, PSP
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	4b15      	ldr	r3, [pc, #84]	; (80063e0 <pxCurrentTCBConst>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	f01e 0f10 	tst.w	lr, #16
 8006390:	bf08      	it	eq
 8006392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639a:	6010      	str	r0, [r2, #0]
 800639c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063a4:	f380 8811 	msr	BASEPRI, r0
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f7fe ffbe 	bl	8005330 <vTaskSwitchContext>
 80063b4:	f04f 0000 	mov.w	r0, #0
 80063b8:	f380 8811 	msr	BASEPRI, r0
 80063bc:	bc09      	pop	{r0, r3}
 80063be:	6819      	ldr	r1, [r3, #0]
 80063c0:	6808      	ldr	r0, [r1, #0]
 80063c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c6:	f01e 0f10 	tst.w	lr, #16
 80063ca:	bf08      	it	eq
 80063cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063d0:	f380 8809 	msr	PSP, r0
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	f3af 8000 	nop.w

080063e0 <pxCurrentTCBConst>:
 80063e0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop

080063e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	607b      	str	r3, [r7, #4]
}
 8006400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006402:	f7fe fedb 	bl	80051bc <xTaskIncrementTick>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800640c:	4b06      	ldr	r3, [pc, #24]	; (8006428 <xPortSysTickHandler+0x40>)
 800640e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	2300      	movs	r3, #0
 8006416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	f383 8811 	msr	BASEPRI, r3
}
 800641e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006430:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <vPortSetupTimerInterrupt+0x34>)
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006436:	4b0b      	ldr	r3, [pc, #44]	; (8006464 <vPortSetupTimerInterrupt+0x38>)
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800643c:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <vPortSetupTimerInterrupt+0x3c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a0a      	ldr	r2, [pc, #40]	; (800646c <vPortSetupTimerInterrupt+0x40>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	099b      	lsrs	r3, r3, #6
 8006448:	4a09      	ldr	r2, [pc, #36]	; (8006470 <vPortSetupTimerInterrupt+0x44>)
 800644a:	3b01      	subs	r3, #1
 800644c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800644e:	4b04      	ldr	r3, [pc, #16]	; (8006460 <vPortSetupTimerInterrupt+0x34>)
 8006450:	2207      	movs	r2, #7
 8006452:	601a      	str	r2, [r3, #0]
}
 8006454:	bf00      	nop
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	e000e010 	.word	0xe000e010
 8006464:	e000e018 	.word	0xe000e018
 8006468:	20000000 	.word	0x20000000
 800646c:	10624dd3 	.word	0x10624dd3
 8006470:	e000e014 	.word	0xe000e014

08006474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006484 <vPortEnableVFP+0x10>
 8006478:	6801      	ldr	r1, [r0, #0]
 800647a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800647e:	6001      	str	r1, [r0, #0]
 8006480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006482:	bf00      	nop
 8006484:	e000ed88 	.word	0xe000ed88

08006488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800648e:	f3ef 8305 	mrs	r3, IPSR
 8006492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2b0f      	cmp	r3, #15
 8006498:	d914      	bls.n	80064c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800649a:	4a17      	ldr	r2, [pc, #92]	; (80064f8 <vPortValidateInterruptPriority+0x70>)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064a4:	4b15      	ldr	r3, [pc, #84]	; (80064fc <vPortValidateInterruptPriority+0x74>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	7afa      	ldrb	r2, [r7, #11]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d20a      	bcs.n	80064c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	607b      	str	r3, [r7, #4]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064c4:	4b0e      	ldr	r3, [pc, #56]	; (8006500 <vPortValidateInterruptPriority+0x78>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064cc:	4b0d      	ldr	r3, [pc, #52]	; (8006504 <vPortValidateInterruptPriority+0x7c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d90a      	bls.n	80064ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	603b      	str	r3, [r7, #0]
}
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <vPortValidateInterruptPriority+0x60>
	}
 80064ea:	bf00      	nop
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	e000e3f0 	.word	0xe000e3f0
 80064fc:	20000d14 	.word	0x20000d14
 8006500:	e000ed0c 	.word	0xe000ed0c
 8006504:	20000d18 	.word	0x20000d18

08006508 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08a      	sub	sp, #40	; 0x28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006510:	2300      	movs	r3, #0
 8006512:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006514:	f7fe fd96 	bl	8005044 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006518:	4b5b      	ldr	r3, [pc, #364]	; (8006688 <pvPortMalloc+0x180>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006520:	f000 f920 	bl	8006764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006524:	4b59      	ldr	r3, [pc, #356]	; (800668c <pvPortMalloc+0x184>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4013      	ands	r3, r2
 800652c:	2b00      	cmp	r3, #0
 800652e:	f040 8093 	bne.w	8006658 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01d      	beq.n	8006574 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006538:	2208      	movs	r2, #8
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4413      	add	r3, r2
 800653e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	2b00      	cmp	r3, #0
 8006548:	d014      	beq.n	8006574 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f023 0307 	bic.w	r3, r3, #7
 8006550:	3308      	adds	r3, #8
 8006552:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <pvPortMalloc+0x6c>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	617b      	str	r3, [r7, #20]
}
 8006570:	bf00      	nop
 8006572:	e7fe      	b.n	8006572 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d06e      	beq.n	8006658 <pvPortMalloc+0x150>
 800657a:	4b45      	ldr	r3, [pc, #276]	; (8006690 <pvPortMalloc+0x188>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	429a      	cmp	r2, r3
 8006582:	d869      	bhi.n	8006658 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006584:	4b43      	ldr	r3, [pc, #268]	; (8006694 <pvPortMalloc+0x18c>)
 8006586:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006588:	4b42      	ldr	r3, [pc, #264]	; (8006694 <pvPortMalloc+0x18c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800658e:	e004      	b.n	800659a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d903      	bls.n	80065ac <pvPortMalloc+0xa4>
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f1      	bne.n	8006590 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065ac:	4b36      	ldr	r3, [pc, #216]	; (8006688 <pvPortMalloc+0x180>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d050      	beq.n	8006658 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2208      	movs	r2, #8
 80065bc:	4413      	add	r3, r2
 80065be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	1ad2      	subs	r2, r2, r3
 80065d0:	2308      	movs	r3, #8
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d91f      	bls.n	8006618 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4413      	add	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <pvPortMalloc+0xf8>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	613b      	str	r3, [r7, #16]
}
 80065fc:	bf00      	nop
 80065fe:	e7fe      	b.n	80065fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	1ad2      	subs	r2, r2, r3
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006612:	69b8      	ldr	r0, [r7, #24]
 8006614:	f000 f908 	bl	8006828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006618:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <pvPortMalloc+0x188>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	4a1b      	ldr	r2, [pc, #108]	; (8006690 <pvPortMalloc+0x188>)
 8006624:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006626:	4b1a      	ldr	r3, [pc, #104]	; (8006690 <pvPortMalloc+0x188>)
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b1b      	ldr	r3, [pc, #108]	; (8006698 <pvPortMalloc+0x190>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d203      	bcs.n	800663a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006632:	4b17      	ldr	r3, [pc, #92]	; (8006690 <pvPortMalloc+0x188>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a18      	ldr	r2, [pc, #96]	; (8006698 <pvPortMalloc+0x190>)
 8006638:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	4b13      	ldr	r3, [pc, #76]	; (800668c <pvPortMalloc+0x184>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	431a      	orrs	r2, r3
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800664e:	4b13      	ldr	r3, [pc, #76]	; (800669c <pvPortMalloc+0x194>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3301      	adds	r3, #1
 8006654:	4a11      	ldr	r2, [pc, #68]	; (800669c <pvPortMalloc+0x194>)
 8006656:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006658:	f7fe fd02 	bl	8005060 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <pvPortMalloc+0x174>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	60fb      	str	r3, [r7, #12]
}
 8006678:	bf00      	nop
 800667a:	e7fe      	b.n	800667a <pvPortMalloc+0x172>
	return pvReturn;
 800667c:	69fb      	ldr	r3, [r7, #28]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3728      	adds	r7, #40	; 0x28
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20004924 	.word	0x20004924
 800668c:	20004938 	.word	0x20004938
 8006690:	20004928 	.word	0x20004928
 8006694:	2000491c 	.word	0x2000491c
 8006698:	2000492c 	.word	0x2000492c
 800669c:	20004930 	.word	0x20004930

080066a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d04d      	beq.n	800674e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066b2:	2308      	movs	r3, #8
 80066b4:	425b      	negs	r3, r3
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4413      	add	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	4b24      	ldr	r3, [pc, #144]	; (8006758 <vPortFree+0xb8>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4013      	ands	r3, r2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10a      	bne.n	80066e4 <vPortFree+0x44>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	60fb      	str	r3, [r7, #12]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <vPortFree+0x62>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	60bb      	str	r3, [r7, #8]
}
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	4b14      	ldr	r3, [pc, #80]	; (8006758 <vPortFree+0xb8>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4013      	ands	r3, r2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01e      	beq.n	800674e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11a      	bne.n	800674e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	4b0e      	ldr	r3, [pc, #56]	; (8006758 <vPortFree+0xb8>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	43db      	mvns	r3, r3
 8006722:	401a      	ands	r2, r3
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006728:	f7fe fc8c 	bl	8005044 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <vPortFree+0xbc>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4413      	add	r3, r2
 8006736:	4a09      	ldr	r2, [pc, #36]	; (800675c <vPortFree+0xbc>)
 8006738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800673a:	6938      	ldr	r0, [r7, #16]
 800673c:	f000 f874 	bl	8006828 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <vPortFree+0xc0>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3301      	adds	r3, #1
 8006746:	4a06      	ldr	r2, [pc, #24]	; (8006760 <vPortFree+0xc0>)
 8006748:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800674a:	f7fe fc89 	bl	8005060 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800674e:	bf00      	nop
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20004938 	.word	0x20004938
 800675c:	20004928 	.word	0x20004928
 8006760:	20004934 	.word	0x20004934

08006764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800676a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800676e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006770:	4b27      	ldr	r3, [pc, #156]	; (8006810 <prvHeapInit+0xac>)
 8006772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00c      	beq.n	8006798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3307      	adds	r3, #7
 8006782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f023 0307 	bic.w	r3, r3, #7
 800678a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	4a1f      	ldr	r2, [pc, #124]	; (8006810 <prvHeapInit+0xac>)
 8006794:	4413      	add	r3, r2
 8006796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800679c:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <prvHeapInit+0xb0>)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067a2:	4b1c      	ldr	r3, [pc, #112]	; (8006814 <prvHeapInit+0xb0>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	4413      	add	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067b0:	2208      	movs	r2, #8
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0307 	bic.w	r3, r3, #7
 80067be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4a15      	ldr	r2, [pc, #84]	; (8006818 <prvHeapInit+0xb4>)
 80067c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067c6:	4b14      	ldr	r3, [pc, #80]	; (8006818 <prvHeapInit+0xb4>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2200      	movs	r2, #0
 80067cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067ce:	4b12      	ldr	r3, [pc, #72]	; (8006818 <prvHeapInit+0xb4>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	1ad2      	subs	r2, r2, r3
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067e4:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <prvHeapInit+0xb4>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	4a0a      	ldr	r2, [pc, #40]	; (800681c <prvHeapInit+0xb8>)
 80067f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	4a09      	ldr	r2, [pc, #36]	; (8006820 <prvHeapInit+0xbc>)
 80067fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067fc:	4b09      	ldr	r3, [pc, #36]	; (8006824 <prvHeapInit+0xc0>)
 80067fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006802:	601a      	str	r2, [r3, #0]
}
 8006804:	bf00      	nop
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	20000d1c 	.word	0x20000d1c
 8006814:	2000491c 	.word	0x2000491c
 8006818:	20004924 	.word	0x20004924
 800681c:	2000492c 	.word	0x2000492c
 8006820:	20004928 	.word	0x20004928
 8006824:	20004938 	.word	0x20004938

08006828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006830:	4b28      	ldr	r3, [pc, #160]	; (80068d4 <prvInsertBlockIntoFreeList+0xac>)
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e002      	b.n	800683c <prvInsertBlockIntoFreeList+0x14>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	429a      	cmp	r2, r3
 8006844:	d8f7      	bhi.n	8006836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	4413      	add	r3, r2
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d108      	bne.n	800686a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	441a      	add	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	441a      	add	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d118      	bne.n	80068b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d00d      	beq.n	80068a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	441a      	add	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	e008      	b.n	80068b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068a6:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <prvInsertBlockIntoFreeList+0xb0>)
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	e003      	b.n	80068b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d002      	beq.n	80068c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	2000491c 	.word	0x2000491c
 80068d8:	20004924 	.word	0x20004924

080068dc <__libc_init_array>:
 80068dc:	b570      	push	{r4, r5, r6, lr}
 80068de:	4d0d      	ldr	r5, [pc, #52]	; (8006914 <__libc_init_array+0x38>)
 80068e0:	4c0d      	ldr	r4, [pc, #52]	; (8006918 <__libc_init_array+0x3c>)
 80068e2:	1b64      	subs	r4, r4, r5
 80068e4:	10a4      	asrs	r4, r4, #2
 80068e6:	2600      	movs	r6, #0
 80068e8:	42a6      	cmp	r6, r4
 80068ea:	d109      	bne.n	8006900 <__libc_init_array+0x24>
 80068ec:	4d0b      	ldr	r5, [pc, #44]	; (800691c <__libc_init_array+0x40>)
 80068ee:	4c0c      	ldr	r4, [pc, #48]	; (8006920 <__libc_init_array+0x44>)
 80068f0:	f000 f82e 	bl	8006950 <_init>
 80068f4:	1b64      	subs	r4, r4, r5
 80068f6:	10a4      	asrs	r4, r4, #2
 80068f8:	2600      	movs	r6, #0
 80068fa:	42a6      	cmp	r6, r4
 80068fc:	d105      	bne.n	800690a <__libc_init_array+0x2e>
 80068fe:	bd70      	pop	{r4, r5, r6, pc}
 8006900:	f855 3b04 	ldr.w	r3, [r5], #4
 8006904:	4798      	blx	r3
 8006906:	3601      	adds	r6, #1
 8006908:	e7ee      	b.n	80068e8 <__libc_init_array+0xc>
 800690a:	f855 3b04 	ldr.w	r3, [r5], #4
 800690e:	4798      	blx	r3
 8006910:	3601      	adds	r6, #1
 8006912:	e7f2      	b.n	80068fa <__libc_init_array+0x1e>
 8006914:	08006a2c 	.word	0x08006a2c
 8006918:	08006a2c 	.word	0x08006a2c
 800691c:	08006a2c 	.word	0x08006a2c
 8006920:	08006a30 	.word	0x08006a30

08006924 <memcpy>:
 8006924:	440a      	add	r2, r1
 8006926:	4291      	cmp	r1, r2
 8006928:	f100 33ff 	add.w	r3, r0, #4294967295
 800692c:	d100      	bne.n	8006930 <memcpy+0xc>
 800692e:	4770      	bx	lr
 8006930:	b510      	push	{r4, lr}
 8006932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800693a:	4291      	cmp	r1, r2
 800693c:	d1f9      	bne.n	8006932 <memcpy+0xe>
 800693e:	bd10      	pop	{r4, pc}

08006940 <memset>:
 8006940:	4402      	add	r2, r0
 8006942:	4603      	mov	r3, r0
 8006944:	4293      	cmp	r3, r2
 8006946:	d100      	bne.n	800694a <memset+0xa>
 8006948:	4770      	bx	lr
 800694a:	f803 1b01 	strb.w	r1, [r3], #1
 800694e:	e7f9      	b.n	8006944 <memset+0x4>

08006950 <_init>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	bf00      	nop
 8006954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006956:	bc08      	pop	{r3}
 8006958:	469e      	mov	lr, r3
 800695a:	4770      	bx	lr

0800695c <_fini>:
 800695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695e:	bf00      	nop
 8006960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006962:	bc08      	pop	{r3}
 8006964:	469e      	mov	lr, r3
 8006966:	4770      	bx	lr
